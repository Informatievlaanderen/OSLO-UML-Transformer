"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveBeenCalledOnceWith = toHaveBeenCalledOnceWith;
var _utils = require("../utils");
function toHaveBeenCalledOnceWith(received, ...expected) {
  const {
    printReceived,
    printExpected,
    printWithType,
    matcherHint
  } = this.utils;
  if (!(0, _utils.isJestMockOrSpy)(received)) {
    return {
      pass: false,
      message: () => matcherHint('.toHaveBeenCalledOnceWith') + '\n\n' + `Matcher error: ${printReceived('received')} must be a mock or spy function` + '\n\n' + printWithType('Received', received, printReceived)
    };
  }
  const passOnce = received.mock.calls.length === 1;
  const pass = passOnce && this.equals(expected, received.mock.calls[0]);
  return {
    pass,
    message: () => {
      var _received$mock$calls$;
      if (pass) {
        return matcherHint('.not.toHaveBeenCalledOnceWith') + '\n\n' + `Expected mock function to have been called any amount of times but one with ${printExpected(received.mock.calls[0])}, but it was called exactly once with ${printExpected(expected)}.`;
      }
      return !passOnce ? matcherHint('.toHaveBeenCalledOnceWith') + '\n\n' + 'Expected mock function to have been called exactly once, but it was called:\n' + `  ${printReceived(received.mock.calls.length)} times` : matcherHint('.toHaveBeenCalledOnceWith') + '\n\n' + `Expected mock function to have been called exactly once with ${printReceived(expected)}, but it was called with:\n` + `  ${printReceived((_received$mock$calls$ = received.mock.calls[0]) === null || _received$mock$calls$ === void 0 ? void 0 : _received$mock$calls$[0])}`;
    },
    actual: received
  };
}