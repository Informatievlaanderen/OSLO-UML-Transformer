/**
 * Generates a SHACLC file stream from a quad stream, since SHACLC is
 * lossy with respect to N3, a stream of quads that could not be
 * written is also output.
 */
import { NamedNode } from 'n3';
import type * as RDF from '@rdfjs/types';
import Store from './volatile-store';
import Writer from './writer';
export default class SHACLCWriter {
    private store;
    private base;
    private errorOnExtraQuads;
    private mintUnspecifiedPrefixes;
    private fetch?;
    private extendedSyntax;
    private prefixes;
    private prefixRev;
    private writer;
    constructor(store: Store, writer: Writer, prefixes?: {
        [prefix: string]: string | RDF.NamedNode;
    }, base?: NamedNode | undefined, errorOnExtraQuads?: boolean, mintUnspecifiedPrefixes?: boolean, fetch?: typeof globalThis.fetch | undefined, extendedSyntax?: boolean);
    /**
     * Used to initiate the flow of data through the writer.
     */
    write(): Promise<void>;
    private writeImports;
    private writePrefixes;
    private termToString;
    private writeShapes;
    private getSingleProperty;
    private singleLayerPropertiesList;
    private expectOneProperty;
    private orProperties;
    /**
     * Extract an rdf:list
     */
    private getList;
    private writeIriLiteralOrArray;
    /**
     * For properties such as minCount where at most one object is expected
     *
     * @param subject
     * @param predicate
     */
    private singleObject;
    private singleQuad;
    private writeAssigment;
    private writeAtom;
    private writeAssigments;
    private writeParams;
    private writeShapeBody;
    private writeProperty;
    private writeTurtlePredicates;
    private writeGivenTurtlePredicates;
    private writeTurtleObjects;
    private writeList;
    private writePath;
}
