"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.write = void 0;
const n3_1 = require("n3");
const ShaclcGenerator_1 = __importDefault(require("./ShaclcGenerator"));
const writer_1 = __importDefault(require("./writer"));
const volatile_store_1 = __importDefault(require("./volatile-store"));
function write(quads, options) {
    return __awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let s = '';
                const volatileStore = new volatile_store_1.default(quads);
                const graphs = volatileStore.getGraphs(null, null, null);
                if (graphs.length > 1) {
                    throw new Error('More than one graph found - can serialize in the default graph');
                }
                if (graphs.length === 1 && !graphs[0].equals(n3_1.DataFactory.defaultGraph())) {
                    throw new Error(`Expected all triples to be in the default graph, instead triples were in ${graphs[0].value}`);
                }
                const w = new writer_1.default({
                    write: (chunk) => {
                        s += chunk;
                    },
                    end: () => {
                        let extraQuads = volatileStore.getQuads(null, null, null, null);
                        if (extraQuads.length === 0) {
                            extraQuads = undefined;
                        }
                        resolve({
                            text: s,
                            extraQuads,
                        });
                    },
                });
                const writer = new ShaclcGenerator_1.default(volatileStore, w, options === null || options === void 0 ? void 0 : options.prefixes, undefined, (options === null || options === void 0 ? void 0 : options.errorOnUnused) !== false, options === null || options === void 0 ? void 0 : options.mintPrefixes, options === null || options === void 0 ? void 0 : options.fetch, options === null || options === void 0 ? void 0 : options.extendedSyntax);
                yield writer.write();
            }
            catch (e) {
                reject(e);
            }
        }));
    });
}
exports.write = write;
