#! /usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const minimist_1 = __importDefault(require("minimist"));
const sparqlAlgebra_1 = __importDefault(require("../lib/sparqlAlgebra"));
const sparql_1 = require("../lib/sparql");
const util_1 = __importDefault(require("../lib/util"));
const args = (0, minimist_1.default)(process.argv.slice(2), {
    boolean: ['q', 'r', 's'],
    alias: { q: 'quads', r: 'reverse', s: 'strict' }
});
if (args.h || args.help || args._.length !== 1) {
    console.error('usage: ./sparqlalgebrajs [-q/--quads] "SELECT * WHERE { ?x ?y ?z}"');
    console.error('options:');
    console.error('  -h --help    : Show this output.');
    console.error('  -q --quads   : Apply GRAPH statements to convert triples to quads.');
    console.error('  -r --reverse : Convert algebra to SPARQL.');
    console.error('  -s --strict  : Only allow parsing of pure SPARQL.');
    process.exit((args.h || args.help) ? 0 : 1);
}
if (args.r || args.reverse) {
    console.log((0, sparql_1.toSparql)(JSON.parse(args._[0]), { sparqlStar: !args.s }));
}
else {
    console.log(JSON.stringify(util_1.default.objectify((0, sparqlAlgebra_1.default)(args._[0], { quads: args.q, sparqlStar: !args.s })), null, 2));
}
//# sourceMappingURL=sparqlalgebrajs.js.map