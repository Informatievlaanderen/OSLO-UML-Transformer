"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSparqlJs = exports.toSparql = void 0;
const rdf_isomorphic_1 = require("rdf-isomorphic");
const rdf_string_1 = require("rdf-string");
const sparqljs_1 = require("sparqljs");
const Algebra = __importStar(require("./algebra"));
const factory_1 = __importDefault(require("./factory"));
const util_1 = __importDefault(require("./util"));
const types = Algebra.types;
const eTypes = Algebra.expressionTypes;
let context;
const factory = new factory_1.default();
function toSparql(op, options = {}) {
    let generator = new sparqljs_1.Generator(options);
    return generator.stringify(toSparqlJs(op));
}
exports.toSparql = toSparql;
function toSparqlJs(op) {
    resetContext();
    op = removeQuads(op);
    let result = translateOperation(op);
    if (result.type === 'group')
        return result.patterns[0];
    return result;
}
exports.toSparqlJs = toSparqlJs;
function resetContext() {
    context = { project: false, extend: [], group: [], aggregates: [], order: [] };
}
function translateOperation(op) {
    // this allows us to differentiate between BIND and SELECT when translating EXTEND
    // GRAPH was added because the way graphs get added back here is not the same as how they get added in the future
    // ^ seems fine but might have to be changed if problems get detected in the future
    if (op.type !== types.EXTEND && op.type !== types.ORDER_BY && op.type !== types.GRAPH)
        context.project = false;
    switch (op.type) {
        case types.EXPRESSION: return translateExpression(op);
        case types.ASK: return translateProject(op, types.ASK);
        case types.BGP: return translateBgp(op);
        case types.CONSTRUCT: return translateConstruct(op);
        case types.DESCRIBE: return translateProject(op, types.DESCRIBE);
        case types.DISTINCT: return translateDistinct(op);
        case types.EXTEND: return translateExtend(op);
        case types.FROM: return translateFrom(op);
        case types.FILTER: return translateFilter(op);
        case types.GRAPH: return translateGraph(op);
        case types.GROUP: return translateGroup(op);
        case types.JOIN: return translateJoin(op);
        case types.LEFT_JOIN: return translateLeftJoin(op);
        case types.MINUS: return translateMinus(op);
        case types.NOP: return {};
        case types.ORDER_BY: return translateOrderBy(op);
        case types.PATH: return translatePath(op);
        case types.PATTERN: return translatePattern(op);
        case types.PROJECT: return translateProject(op, types.PROJECT);
        case types.REDUCED: return translateReduced(op);
        case types.SERVICE: return translateService(op);
        case types.SLICE: return translateSlice(op);
        case types.UNION: return translateUnion(op);
        case types.VALUES: return translateValues(op);
        // UPDATE operations
        case types.COMPOSITE_UPDATE: return translateCompositeUpdate(op);
        case types.DELETE_INSERT: return translateDeleteInsert(op);
        case types.LOAD: return translateLoad(op);
        case types.CLEAR: return translateClear(op);
        case types.CREATE: return translateCreate(op);
        case types.DROP: return translateDrop(op);
        case types.ADD: return translateAdd(op);
        case types.MOVE: return translateMove(op);
        case types.COPY: return translateCopy(op);
    }
    throw new Error(`Unknown Operation type ${op.type}`);
}
function translateExpression(expr) {
    switch (expr.expressionType) {
        case eTypes.AGGREGATE: return translateAggregateExpression(expr);
        case eTypes.EXISTENCE: return translateExistenceExpression(expr);
        case eTypes.NAMED: return translateNamedExpression(expr);
        case eTypes.OPERATOR: return translateOperatorExpression(expr);
        case eTypes.TERM: return translateTermExpression(expr);
        case eTypes.WILDCARD: return translateWildcardExpression(expr);
    }
    throw new Error(`Unknown Expression Operation type ${expr.expressionType}`);
}
function translatePathComponent(path) {
    switch (path.type) {
        case types.ALT: return translateAlt(path);
        case types.INV: return translateInv(path);
        case types.LINK: return translateLink(path);
        case types.NPS: return translateNps(path);
        case types.ONE_OR_MORE_PATH: return translateOneOrMorePath(path);
        case types.SEQ: return translateSeq(path);
        case types.ZERO_OR_MORE_PATH: return translateZeroOrMorePath(path);
        case types.ZERO_OR_ONE_PATH: return translateZeroOrOnePath(path);
    }
    throw new Error(`Unknown Path type ${path.type}`);
}
function translateTerm(term) {
    return (0, rdf_string_1.termToString)(term);
}
// ------------------------- EXPRESSIONS -------------------------
function translateAggregateExpression(expr) {
    const result = {
        expression: translateExpression(expr.expression),
        type: 'aggregate',
        aggregation: expr.aggregator,
        distinct: expr.distinct
    };
    if (expr.separator)
        result.separator = expr.separator;
    return result;
}
function translateExistenceExpression(expr) {
    return {
        type: 'operation',
        operator: expr.not ? 'notexists' : 'exists',
        args: [{
                type: 'group',
                patterns: util_1.default.flatten([translateOperation(expr.input)])
            }]
    };
}
function translateNamedExpression(expr) {
    return {
        type: 'functionCall',
        // Wrong typings
        function: expr.name,
        args: expr.args.map(translateExpression)
    };
}
function translateOperatorExpression(expr) {
    if (expr.operator === 'desc') {
        const result = { expression: translateExpression(expr.args[0]) };
        result.descending = true;
        return result;
    }
    const result = {
        type: 'operation',
        operator: expr.operator,
        args: expr.args.map(translateExpression)
    };
    if (result.operator === 'in' || result.operator === 'notin')
        result.args = [result.args[0]].concat([result.args.slice(1)]);
    return result;
}
function translateTermExpression(expr) {
    return expr.term;
}
function translateWildcardExpression(expr) {
    return expr.wildcard;
}
function arrayToPattern(input) {
    if (!Array.isArray(input))
        return input;
    if (input.length === 1)
        return input[0];
    return {
        type: 'group',
        patterns: input,
    };
}
// ------------------------- OPERATIONS -------------------------
// these get translated in the project function
function translateBoundAggregate(op) {
    return op;
}
function translateBgp(op) {
    let patterns = op.patterns.map(translatePattern);
    if (patterns.length === 0)
        return null;
    return {
        type: 'bgp',
        triples: patterns
    };
}
function translateConstruct(op) {
    return {
        type: 'query',
        prefixes: {},
        queryType: 'CONSTRUCT',
        template: op.template.map(translatePattern),
        where: util_1.default.flatten([
            translateOperation(op.input)
        ])
    };
}
function translateDistinct(op) {
    let result = translateOperation(op.input);
    // project is nested in group object
    result.patterns[0].distinct = true;
    return result;
}
function translateExtend(op) {
    if (context.project) {
        context.extend.push(op);
        return translateOperation(op.input);
    }
    return util_1.default.flatten([
        translateOperation(op.input),
        {
            type: 'bind',
            variable: op.variable,
            expression: translateExpression(op.expression)
        }
    ]);
}
function translateFrom(op) {
    const result = translateOperation(op.input);
    // Can't type as CONSTRUCT queries do not have `from` field in their type
    let obj = result;
    // project is nested in group object
    if (result.type === 'group') {
        obj = result.patterns[0];
    }
    obj.from = {
        default: op.default,
        named: op.named
    };
    return result;
}
function translateFilter(op) {
    return {
        type: 'group',
        patterns: util_1.default.flatten([
            translateOperation(op.input),
            { type: 'filter', expression: translateExpression(op.expression) }
        ])
    };
}
function translateGraph(op) {
    return {
        type: 'graph',
        patterns: util_1.default.flatten([translateOperation(op.input)]),
        name: op.name
    };
}
function translateGroup(op) {
    const input = translateOperation(op.input);
    const aggs = op.aggregates.map(translateBoundAggregate);
    context.aggregates.push(...aggs);
    // TODO: apply possible extends
    context.group.push(...op.variables);
    return input;
}
function translateJoin(op) {
    const arr = util_1.default.flatten(op.input.map(translateOperation));
    // Merge bgps
    // This is possible if one side was a path and the other a bgp for example
    return arr.reduce((result, val) => {
        if (val.type !== 'bgp' || result.length == 0 || result[result.length - 1].type !== 'bgp') {
            result.push(val);
        }
        else {
            result[result.length - 1].triples.push(...val.triples);
        }
        return result;
    }, []);
}
function translateLeftJoin(op) {
    const leftjoin = {
        type: 'optional',
        patterns: [
            translateOperation(op.input[1])
        ]
    };
    if (op.expression) {
        leftjoin.patterns.push({
            type: 'filter',
            expression: translateExpression(op.expression)
        });
    }
    leftjoin.patterns = util_1.default.flatten(leftjoin.patterns);
    return util_1.default.flatten([
        translateOperation(op.input[0]),
        leftjoin
    ]);
}
function translateMinus(op) {
    let patterns = translateOperation(op.input[1]);
    if (patterns.type === 'group')
        patterns = patterns.patterns;
    if (!Array.isArray(patterns))
        patterns = [patterns];
    return util_1.default.flatten([
        translateOperation(op.input[0]),
        {
            type: 'minus',
            patterns: patterns
        }
    ]);
}
function translateOrderBy(op) {
    context.order.push(...op.expressions);
    return translateOperation(op.input);
}
function translatePath(op) {
    return {
        type: 'bgp',
        triples: [{
                subject: op.subject,
                predicate: translatePathComponent(op.predicate),
                object: op.object
            }]
    };
}
function translatePattern(op) {
    return {
        subject: op.subject,
        predicate: op.predicate,
        object: op.object
    };
}
function replaceAggregatorVariables(s, map) {
    let st = util_1.default.isSimpleTerm(s) ? translateTerm(s) : s;
    if (typeof st === 'string') {
        if (map[st])
            return map[st];
    }
    else if (Array.isArray(s)) {
        s = s.map(e => replaceAggregatorVariables(e, map));
    }
    else {
        for (let key of Object.keys(s))
            s[key] = replaceAggregatorVariables(s[key], map);
    }
    return s;
}
function translateProject(op, type) {
    const result = {
        type: 'query',
        prefixes: {}
    };
    // Makes typing easier in some places
    const select = result;
    let variables;
    if (type === types.PROJECT) {
        result.queryType = 'SELECT';
        variables = op.variables;
    }
    else if (type === types.ASK) {
        result.queryType = 'ASK';
    }
    else if (type === types.DESCRIBE) {
        result.queryType = 'DESCRIBE';
        variables = op.terms;
    }
    // backup values in case of nested queries
    // everything in extend, group, etc. is irrelevant for this project call
    const extend = context.extend;
    const group = context.group;
    const aggregates = context.aggregates;
    const order = context.order;
    resetContext();
    context.project = true;
    let input = util_1.default.flatten([translateOperation(op.input)]);
    if (input.length === 1 && input[0].type === 'group')
        input = input[0].patterns;
    result.where = input;
    let aggregators = {};
    // these can not reference each other
    for (let agg of context.aggregates)
        aggregators[translateTerm(agg.variable)] = translateExpression(agg);
    // do these in reverse order since variables in one extend might apply to an expression in an other extend
    let extensions = {};
    for (let i = context.extend.length - 1; i >= 0; --i) {
        let e = context.extend[i];
        extensions[translateTerm(e.variable)] = replaceAggregatorVariables(translateExpression(e.expression), aggregators);
    }
    if (context.group.length > 0)
        select.group = context.group.map(variable => {
            let v = translateTerm(variable);
            if (extensions[v]) {
                let result = extensions[v];
                delete extensions[v]; // make sure there is only 1 'AS' statement
                return {
                    variable,
                    expression: result
                };
            }
            return { expression: variable };
        });
    // descending expressions will already be in the correct format due to the structure of those
    if (context.order.length > 0)
        select.order = context.order.map(translateOperation).map(o => o.descending ? o : ({ expression: o }));
    // this needs to happen after the group because it might depend on variables generated there
    if (variables) {
        select.variables = variables.map((term) => {
            let v = translateTerm(term);
            if (extensions[v]) {
                let result = extensions[v];
                delete extensions[v]; // remove used extensions so only unused ones remain
                return {
                    variable: term,
                    expression: result,
                };
            }
            return term;
        });
        // if the * didn't match any variables this would be empty
        if (select.variables.length === 0)
            select.variables = [new sparqljs_1.Wildcard()];
    }
    // It is possible that at this point some extensions have not yet been resolved.
    // These would be bind operations that are not used in a GROUP BY or SELECT body.
    // We still need to add them though, as they could be relevant to the other extensions.
    const extensionEntries = Object.entries(extensions);
    if (extensionEntries.length > 0) {
        select.where = select.where || [];
        for (const [key, value] of extensionEntries) {
            select.where.push({
                type: 'bind',
                variable: (0, rdf_string_1.stringToTerm)(key),
                expression: value
            });
        }
    }
    // convert filter to 'having' if it contains an aggregator variable
    // could always convert, but is nicer to use filter when possible
    if (result.where.length > 0 && result.where[result.where.length - 1].type === 'filter') {
        const filter = result.where[result.where.length - 1];
        if (objectContainsValues(filter, Object.keys(aggregators))) {
            select.having = util_1.default.flatten([replaceAggregatorVariables(filter.expression, aggregators)]);
            result.where.splice(-1);
        }
    }
    context.extend = extend;
    context.group = group;
    context.aggregates = aggregates;
    context.order = order;
    // subqueries need to be in a group, this will be removed again later for the root query
    return { type: 'group', patterns: [select] };
}
function objectContainsValues(o, vals) {
    if (util_1.default.isSimpleTerm(o))
        return vals.indexOf(translateTerm(o)) >= 0;
    if (Array.isArray(o))
        return o.some(e => objectContainsValues(e, vals));
    if (o === Object(o))
        return Object.keys(o).some(key => objectContainsValues(o[key], vals));
    return vals.indexOf(o) >= 0;
}
function translateReduced(op) {
    let result = translateOperation(op.input);
    // project is nested in group object
    result.patterns[0].reduced = true;
    return result;
}
function translateService(op) {
    let patterns = translateOperation(op.input);
    if (patterns.type === 'group')
        patterns = patterns.patterns;
    if (!Array.isArray(patterns))
        patterns = [patterns];
    return {
        type: 'service',
        // Typings are wrong, name can also be a variable
        name: op.name,
        silent: op.silent,
        patterns
    };
}
function translateSlice(op) {
    let result = translateOperation(op.input);
    // results can be nested in a group object
    let obj = result;
    if (result.type && result.type === 'group')
        obj = result.patterns[0];
    if (op.start !== 0)
        obj.offset = op.start;
    if (op.length !== undefined)
        obj.limit = op.length;
    return result;
}
function translateUnion(op) {
    return {
        type: 'union',
        patterns: op.input.map(translateOperation).map(arrayToPattern),
    };
}
function translateValues(op) {
    // TODO: check if handled correctly when outside of select block
    return {
        type: 'values',
        values: op.bindings.map(binding => {
            let result = {};
            for (let v of op.variables) {
                let s = `?${v.value}`;
                if (binding[s])
                    result[s] = binding[s];
                else
                    result[s] = undefined;
            }
            return result;
        })
    };
}
// PATH COMPONENTS
function translateAlt(path) {
    const mapped = path.input.map(translatePathComponent);
    if (mapped.every(entry => 'pathType' in entry && entry.pathType === '!')) {
        return {
            type: 'path',
            pathType: '!',
            items: [{
                    type: 'path',
                    pathType: '|',
                    items: util_1.default.flatten(mapped.map(entry => entry.items))
                }]
        };
    }
    return {
        type: 'path',
        pathType: '|',
        items: mapped
    };
}
function translateInv(path) {
    if (path.path.type === types.NPS) {
        const inv = path.path.iris.map((iri) => {
            return {
                type: 'path',
                pathType: '^',
                items: [iri]
            };
        });
        if (inv.length <= 1)
            return {
                type: 'path',
                pathType: '!',
                items: inv
            };
        return {
            type: 'path',
            pathType: '!',
            items: [{
                    type: 'path',
                    pathType: '|',
                    items: inv
                }]
        };
    }
    return {
        type: 'path',
        pathType: '^',
        items: [translatePathComponent(path.path)]
    };
}
function translateLink(path) {
    return path.iri;
}
function translateNps(path) {
    if (path.iris.length <= 1)
        return {
            type: 'path',
            pathType: '!',
            items: path.iris
        };
    return {
        type: 'path',
        pathType: '!',
        items: [{
                type: 'path',
                pathType: '|',
                items: path.iris
            }]
    };
}
function translateOneOrMorePath(path) {
    return {
        type: 'path',
        pathType: '+',
        items: [translatePathComponent(path.path)]
    };
}
function translateSeq(path) {
    return {
        type: 'path',
        pathType: '/',
        items: path.input.map(translatePathComponent)
    };
}
function translateZeroOrMorePath(path) {
    return {
        type: 'path',
        pathType: '*',
        items: [translatePathComponent(path.path)]
    };
}
function translateZeroOrOnePath(path) {
    // Typings are missing '?' operator
    return {
        type: 'path',
        // Typings are missing this path
        pathType: '?',
        items: [translatePathComponent(path.path)]
    };
}
// UPDATE OPERATIONS
function translateCompositeUpdate(op) {
    const updates = op.updates.map(update => {
        const result = translateOperation(update);
        return result.updates[0];
    });
    return { prefixes: {}, type: 'update', updates };
}
function translateDeleteInsert(op) {
    var _a;
    let where = op.where;
    let use = undefined;
    if (where && where.type === types.FROM) {
        let from = where;
        where = from.input;
        use = { default: from.default, named: from.named };
    }
    const updates = [{
            updateType: 'insertdelete',
            delete: convertUpdatePatterns(op.delete || []),
            insert: convertUpdatePatterns(op.insert || []),
        }];
    // Typings don't support 'using' yet
    if (use)
        updates[0].using = use;
    // corresponds to empty array in SPARQL.js
    if (!where || (where.type === types.BGP && where.patterns.length === 0))
        updates[0].where = [];
    else {
        const graphs = [];
        let result = translateOperation(removeQuadsRecursive(where, graphs));
        if (result.type === 'group')
            updates[0].where = result.patterns;
        else
            updates[0].where = [result];
        // graph might not be applied yet since there was no project
        // this can only happen if there was a single graph
        if (graphs.length > 0) {
            if (graphs.length !== 1)
                throw new Error('This is unexpected and might indicate an error in graph handling for updates.');
            // ignore if default graph
            if (((_a = graphs[0]) === null || _a === void 0 ? void 0 : _a.value) !== '')
                updates[0].where = [{ type: 'graph', patterns: updates[0].where, name: graphs[0] }];
        }
    }
    // not really necessary but can give cleaner looking queries
    if (!op.delete && !op.where) {
        updates[0].updateType = 'insert';
        delete updates[0].delete;
        delete updates[0].where;
    }
    else if (!op.insert && !op.where) {
        delete updates[0].insert;
        delete updates[0].where;
        if (op.delete.some(pattern => pattern.subject.termType === 'Variable' ||
            pattern.predicate.termType === 'Variable' ||
            pattern.object.termType === 'Variable'))
            updates[0].updateType = 'deletewhere';
        else
            updates[0].updateType = 'delete';
    }
    else if (!op.insert && op.where && op.where.type === 'bgp') {
        if ((0, rdf_isomorphic_1.isomorphic)(op.delete, op.where.patterns)) {
            delete updates[0].where;
            updates[0].updateType = 'deletewhere';
        }
    }
    return { prefixes: {}, type: 'update', updates };
}
function translateLoad(op) {
    // Typings are wrong, destiniation is optional
    const updates = [{ type: 'load', silent: Boolean(op.silent), source: op.source }];
    if (op.destination)
        updates[0].destination = op.destination;
    return { prefixes: {}, type: 'update', updates };
}
function translateClear(op) {
    return translateClearCreateDrop(op, 'clear');
}
function translateCreate(op) {
    return translateClearCreateDrop(op, 'create');
}
function translateDrop(op) {
    return translateClearCreateDrop(op, 'drop');
}
function translateClearCreateDrop(op, type) {
    const updates = [{ type, silent: Boolean(op.silent) }];
    // Typings are wrong, type is not required, see for example "clear-drop" test
    if (op.source === 'DEFAULT')
        updates[0].graph = { default: true };
    else if (op.source === 'NAMED')
        updates[0].graph = { named: true };
    else if (op.source === 'ALL')
        updates[0].graph = { all: true };
    else
        updates[0].graph = { type: 'graph', name: op.source };
    return { prefixes: {}, type: 'update', updates };
}
function translateAdd(op) {
    return translateUpdateGraphShortcut(op, 'add');
}
function translateMove(op) {
    return translateUpdateGraphShortcut(op, 'move');
}
function translateCopy(op) {
    return translateUpdateGraphShortcut(op, 'copy');
}
function translateUpdateGraphShortcut(op, type) {
    const updates = [{ type, silent: Boolean(op.silent) }];
    updates[0].source = op.source === 'DEFAULT' ? { type: 'graph', default: true } : { type: 'graph', name: op.source };
    updates[0].destination = op.destination === 'DEFAULT' ? { type: 'graph', default: true } : { type: 'graph', name: op.destination };
    return { prefixes: {}, type: 'update', updates };
}
// similar to removeQuads but more simplified for UPDATEs
function convertUpdatePatterns(patterns) {
    if (!patterns)
        return [];
    const graphs = {};
    patterns.forEach(pattern => {
        const graph = pattern.graph.value;
        if (!graphs[graph])
            graphs[graph] = [];
        graphs[graph].push(pattern);
    });
    return Object.keys(graphs).map(graph => {
        if (graph === '')
            return { type: 'bgp', triples: graphs[graph].map(translatePattern) };
        return { type: 'graph', triples: graphs[graph].map(translatePattern), name: graphs[graph][0].graph };
    });
}
function removeQuads(op) {
    return removeQuadsRecursive(op, []);
}
// remove quads
function removeQuadsRecursive(op, graphs) {
    if (Array.isArray(op))
        return op.map(sub => removeQuadsRecursive(sub, graphs));
    if (!op.type)
        return op;
    // UPDATE operations with Patterns handle graphs a bit differently
    if (op.type === types.DELETE_INSERT)
        return op;
    if ((op.type === types.PATTERN || op.type === types.PATH) && op.graph) {
        graphs.push(op.graph);
        // Remove non-default graphs
        if (op.graph.name !== '')
            return op.type === types.PATTERN ?
                factory.createPattern(op.subject, op.predicate, op.object) :
                factory.createPath(op.subject, op.predicate, op.object);
        return op;
    }
    const result = {};
    const keyGraphs = {}; // unique graph per key
    const globalNames = {}; // track all the unique graph names for the entire Operation
    for (let key of Object.keys(op)) {
        const newGraphs = [];
        result[key] = removeQuadsRecursive(op[key], newGraphs);
        if (newGraphs.length > 0) {
            keyGraphs[key] = newGraphs;
            for (const graph of newGraphs) {
                globalNames[graph.value] = graph;
            }
        }
    }
    const graphNameSet = Object.keys(globalNames);
    if (graphNameSet.length > 0) {
        // We also need to create graph statement if we are at the edge of certain operations
        if (graphNameSet.length === 1 && ![types.PROJECT, types.SERVICE].includes(op.type))
            graphs.push(globalNames[graphNameSet[0]]);
        else if (op.type === types.BGP) {
            // This is the specific case that got changed because of using quads.
            return splitBgpToGraphs(op, keyGraphs.patterns);
        }
        else {
            // multiple graphs (or project), need to create graph objects for them
            for (let key of Object.keys(keyGraphs)) {
                const value = result[key];
                if (Array.isArray(value))
                    result[key] = value.map((child, idx) => keyGraphs[key][0].value === '' ? child : factory.createGraph(child, keyGraphs[key][idx]));
                else if (keyGraphs[key][0].value !== '')
                    result[key] = factory.createGraph(value, keyGraphs[key][0]);
            }
        }
    }
    return result;
}
// `graphs` should be an array of length identical to `op.patterns`, containing the corresponding graph for each triple.
function splitBgpToGraphs(op, graphs) {
    var _a;
    // Split patterns per graph
    const graphPatterns = {};
    for (let i = 0; i < op.patterns.length; ++i) {
        const pattern = op.patterns[i];
        const graphName = graphs[i].value;
        graphPatterns[graphName] = (_a = graphPatterns[graphName]) !== null && _a !== void 0 ? _a : { patterns: [], graph: graphs[i] };
        graphPatterns[graphName].patterns.push(pattern);
    }
    // Create graph objects for every cluster
    let children = [];
    for (const [graphName, { patterns, graph }] of Object.entries(graphPatterns)) {
        const bgp = factory.createBgp(patterns);
        children.push(graphName === '' ? bgp : factory.createGraph(bgp, graph));
    }
    // Join the graph objects
    let join = children[0];
    for (let i = 1; i < children.length; ++i)
        join = factory.createJoin([join, children[i]]);
    return join;
}
//# sourceMappingURL=sparql.js.map