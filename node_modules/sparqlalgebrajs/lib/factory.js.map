{"version":3,"file":"factory.js","sourceRoot":"","sources":["factory.ts"],"names":[],"mappings":"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","sourcesContent":["import * as A from './algebra';\nimport * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { stringToTerm } from \"rdf-string\";\nimport { Wildcard } from 'sparqljs';\n\nexport default class Factory\n{\n    dataFactory: RDF.DataFactory<RDF.BaseQuad, RDF.BaseQuad>;\n    stringType: RDF.NamedNode;\n\n    constructor(dataFactory?: RDF.DataFactory) {\n        this.dataFactory = dataFactory || new DataFactory();\n        this.stringType = <RDF.NamedNode>this.createTerm('http://www.w3.org/2001/XMLSchema#string');\n    }\n\n    createAlt (input: A.PropertyPathSymbol[], flatten = true): A.Alt { return this.flattenMulti({ type: A.types.ALT, input }, flatten); }\n    createAsk (input: A.Operation): A.Ask { return { type: A.types.ASK, input }; }\n    createBoundAggregate (variable: RDF.Variable, aggregate: string, expression: A.Expression, distinct: boolean, separator?: string): A.BoundAggregate\n    {\n        const result = <A.BoundAggregate>this.createAggregateExpression(aggregate, expression, distinct, separator);\n        result.variable = variable;\n        return result;\n    }\n    createBgp (patterns: A.Pattern[]): A.Bgp { return { type: A.types.BGP, patterns }; }\n    createConstruct (input: A.Operation, template: A.Pattern[]): A.Construct { return { type: A.types.CONSTRUCT, input, template }; }\n    createDescribe (input: A.Operation, terms: (RDF.Variable | RDF.NamedNode)[]): A.Describe { return { type: A.types.DESCRIBE, input, terms }; }\n    createDistinct (input: A.Operation) : A.Distinct { return { type: A.types.DISTINCT, input }; }\n    createExtend (input: A.Operation, variable: RDF.Variable, expression: A.Expression) : A.Extend { return { type: A.types.EXTEND, input, variable, expression }; }\n    createFrom (input: A.Operation, def: RDF.NamedNode[], named: RDF.NamedNode[]) : A.From { return { type: A.types.FROM, input, default: def, named }; }\n    createFilter (input: A.Operation, expression: A.Expression) : A.Filter { return { type: A.types.FILTER, input, expression }; }\n    createGraph (input: A.Operation, name: RDF.Variable | RDF.NamedNode) : A.Graph { return { type: A.types.GRAPH, input, name }; }\n    createGroup (input: A.Operation, variables: RDF.Variable[], aggregates: A.BoundAggregate[]) : A.Group { return { type: A.types.GROUP, input, variables, aggregates }; }\n    createInv (path: A.PropertyPathSymbol): A.Inv { return { type: A.types.INV, path }; }\n    createJoin (input: A.Operation[], flatten = true): A.Join { return this.flattenMulti({ type: A.types.JOIN, input }, flatten); }\n    createLeftJoin (left: A.Operation, right: A.Operation, expression?: A.Expression): A.LeftJoin\n    {\n        if (expression)\n            return { type: A.types.LEFT_JOIN, input: [ left, right ], expression };\n        return { type: A.types.LEFT_JOIN, input: [ left, right ] };\n    }\n    createLink (iri: RDF.NamedNode): A.Link { return { type: A.types.LINK, iri }; }\n    createMinus (left: A.Operation, right: A.Operation): A.Minus { return { type: A.types.MINUS, input: [ left, right ] }; }\n    createNop (): A.Nop { return { type: A.types.NOP }; }\n    createNps (iris: RDF.NamedNode[]): A.Nps { return { type: A.types.NPS, iris }; }\n    createOneOrMorePath (path: A.PropertyPathSymbol): A.OneOrMorePath { return { type: A.types.ONE_OR_MORE_PATH, path }; }\n    createOrderBy (input: A.Operation, expressions: A.Expression[]) : A.OrderBy { return { type: A.types.ORDER_BY, input, expressions }; }\n    createPath (subject: RDF.Term, predicate: A.PropertyPathSymbol, object: RDF.Term, graph?: RDF.Term) : A.Path\n    {\n        if (graph)\n            return { type: A.types.PATH, subject, predicate, object, graph };\n        return { type: A.types.PATH, subject, predicate, object, graph: this.dataFactory.defaultGraph() };\n    }\n    createPattern (subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph?: RDF.Term): A.Pattern\n    {\n        const pattern = <A.Pattern>this.dataFactory.quad(subject, predicate, object, graph);\n        pattern.type = A.types.PATTERN;\n        return pattern;\n    }\n    createProject (input: A.Operation, variables: RDF.Variable[]) : A.Project { return { type: A.types.PROJECT, input, variables }; }\n    createReduced (input: A.Operation) : A.Reduced { return { type: A.types.REDUCED, input }; }\n    createSeq (input: A.PropertyPathSymbol[], flatten = true): A.Seq { return this.flattenMulti({ type: A.types.SEQ, input }, flatten); }\n    createService (input: A.Operation, name: RDF.NamedNode | RDF.Variable, silent?: boolean): A.Service { return { type: A.types.SERVICE, input, name, silent: Boolean(silent) }; }\n    createSlice (input: A.Operation, start: number, length?: number) : A.Slice\n    {\n        start = start || 0;\n        if (length !== undefined)\n            return { type: A.types.SLICE, input, start, length };\n        return { type: A.types.SLICE, input, start };\n    }\n    createUnion (input: A.Operation[], flatten = true): A.Union { return this.flattenMulti({ type: A.types.UNION, input }, flatten); }\n    createValues (variables: RDF.Variable[], bindings: {[key: string]: RDF.Literal | RDF.NamedNode}[]): A.Values { return { type: A.types.VALUES, variables, bindings }; }\n    createZeroOrMorePath (path: A.PropertyPathSymbol): A.ZeroOrMorePath { return { type: A.types.ZERO_OR_MORE_PATH, path }; }\n    createZeroOrOnePath (path: A.PropertyPathSymbol): A.ZeroOrOnePath { return { type: A.types.ZERO_OR_ONE_PATH, path }; }\n    createAggregateExpression (aggregator: string, expression: A.Expression, distinct: boolean, separator?: string): A.AggregateExpression\n    {\n        if (separator)\n            return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.AGGREGATE, aggregator: <any> aggregator, expression, separator, distinct};\n        return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.AGGREGATE, aggregator: <any> aggregator, expression, distinct };\n    }\n    createExistenceExpression (not: boolean, input: A.Operation): A.ExistenceExpression { return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.EXISTENCE, not, input }; }\n    createNamedExpression (name: RDF.NamedNode, args: A.Expression[]): A.NamedExpression { return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.NAMED, name, args }; }\n    createOperatorExpression (operator: string, args: A.Expression[]): A.OperatorExpression { return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.OPERATOR, operator, args }; }\n    createTermExpression (term: RDF.Term): A.TermExpression { return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.TERM, term }; }\n    createWildcardExpression (): A.WildcardExpression { return { type: A.types.EXPRESSION, expressionType: A.expressionTypes.WILDCARD, wildcard: new Wildcard() }; }\n\n    createTerm (str: string): RDF.Term\n    {\n        if (str[0] === '$') {\n            str = str.replace('$', '?');\n        }\n        return stringToTerm(str, this.dataFactory);\n    }\n\n    // Update functions\n    createCompositeUpdate (updates: A.Update[]): A.CompositeUpdate { return { type: A.types.COMPOSITE_UPDATE, updates }; }\n    createDeleteInsert (deleteQuads?: A.Pattern[], insertQuads?: A.Pattern[], where?: A.Operation): A.DeleteInsert {\n        const result: A.DeleteInsert = { type: A.types.DELETE_INSERT };\n        if (deleteQuads)\n            result.delete = deleteQuads;\n        if (insertQuads)\n            result.insert = insertQuads;\n        if (where)\n            result.where = where;\n        return result;\n    }\n    createLoad (source: RDF.NamedNode, destination?: RDF.NamedNode, silent?: boolean): A.Load {\n        const result: A.Load = { type: A.types.LOAD, source };\n        if (destination)\n            result.destination = destination;\n        return this.addSilent(result, Boolean(silent));\n    }\n    createClear (source: 'DEFAULT' | 'NAMED' | 'ALL' | RDF.NamedNode, silent?: boolean): A.Clear {\n        return this.addSilent({ type: A.types.CLEAR, source }, Boolean(silent));\n    }\n    createCreate (source: RDF.NamedNode, silent?: boolean): A.Create {\n        return this.addSilent({ type: A.types.CREATE, source }, Boolean(silent));\n    }\n    createDrop (source: 'DEFAULT' | 'NAMED' | 'ALL' | RDF.NamedNode, silent?: boolean): A.Drop {\n        return this.addSilent({ type: A.types.DROP, source }, Boolean(silent));\n    }\n    createAdd (source: 'DEFAULT' | RDF.NamedNode, destination: 'DEFAULT' | RDF.NamedNode, silent?: boolean): A.Add {\n        return this.addSilent({ type: A.types.ADD, source, destination }, Boolean(silent));\n    }\n    createMove (source: 'DEFAULT' | RDF.NamedNode, destination: 'DEFAULT' | RDF.NamedNode, silent?: boolean): A.Move {\n        return this.addSilent({ type: A.types.MOVE, source, destination }, Boolean(silent));\n    }\n    createCopy (source: 'DEFAULT' | RDF.NamedNode, destination: 'DEFAULT' | RDF.NamedNode, silent?: boolean): A.Copy {\n        return this.addSilent({ type: A.types.COPY, source, destination }, Boolean(silent));\n    }\n    private addSilent<T extends A.UpdateGraph>(input: T, silent: boolean): T {\n        if (silent)\n            input.silent = silent;\n        return input;\n    }\n    private flattenMulti<T extends A.Multi>(input: T, flatten: boolean): T {\n        if (!flatten) {\n            return input;\n        }\n        const type = input.type;\n        const children = input.input;\n        let newChildren: A.Operation[] = [];\n        for (const child of children) {\n            if (child.type === type) {\n                newChildren.push(...(<A.Multi> child).input);\n            } else {\n                newChildren.push(child);\n            }\n        }\n        input.input = newChildren;\n        return input;\n    }\n}\n"]}