{"version":3,"file":"ItemPropertyHandlerNumber.js","sourceRoot":"","sources":["ItemPropertyHandlerNumber.ts"],"names":[],"mappings":";;;AAEA,kCAA+B;AAG/B;;GAEG;AACH,MAAa,yBAAyB;IAIpC,YAAmB,OAAe,EAAE,aAAqB;QACvD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAEM,SAAS,CAAC,OAAe,EAAE,UAAkC;QAClE,OAAO,IAAI,CAAC,OAAO,KAAK,OAAO,IAAI,IAAI,CAAC,aAAa,IAAI,UAAU,CAAC;IACtE,CAAC;IAEM,SAAS,CAAC,UAAkC,EAAE,IAAU,EAAE,SAAqB;QACpF,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC7C,IAAI,QAA4B,CAAC;QACjC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACrE,QAAQ,GAAG,GAAG,WAAI,CAAC,GAAG,SAAS,CAAC;SACjC;aAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;YAClD,QAAQ,GAAG,GAAG,WAAI,CAAC,GAAG,QAAQ,CAAC;SAChC;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3F,CAAC;CACF;AAvBD,8DAuBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IItemScope } from '../IItemScope';\nimport { Util } from '../Util';\nimport type { IItemPropertyHandler } from './IItemPropertyHandler';\n\n/**\n * Handler for an item property with a number attribute.\n */\nexport class ItemPropertyHandlerNumber implements IItemPropertyHandler {\n  private readonly tagName: string;\n  private readonly attributeName: string;\n\n  public constructor(tagName: string, attributeName: string) {\n    this.tagName = tagName;\n    this.attributeName = attributeName;\n  }\n\n  public canHandle(tagName: string, attributes: Record<string, string>): boolean {\n    return this.tagName === tagName && this.attributeName in attributes;\n  }\n\n  public getObject(attributes: Record<string, string>, util: Util, itemScope: IItemScope): RDF.Quad_Object {\n    const value = attributes[this.attributeName];\n    let datatype: string | undefined;\n    if (!Number.isNaN(Number.parseInt(value, 10)) && !value.includes('.')) {\n      datatype = `${Util.XSD}integer`;\n    } else if (!Number.isNaN(Number.parseFloat(value))) {\n      datatype = `${Util.XSD}double`;\n    }\n    return util.dataFactory.literal(value, datatype && util.dataFactory.namedNode(datatype));\n  }\n}\n"]}