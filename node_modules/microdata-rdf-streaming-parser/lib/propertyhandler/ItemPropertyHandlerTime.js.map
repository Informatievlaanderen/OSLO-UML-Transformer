{"version":3,"file":"ItemPropertyHandlerTime.js","sourceRoot":"","sources":["ItemPropertyHandlerTime.ts"],"names":[],"mappings":";;;AAEA,kCAA+B;AAG/B;;GAEG;AACH,MAAa,uBAAuB;IAgB3B,SAAS,CAAC,OAAe,EAAE,UAAkC;QAClE,OAAO,OAAO,KAAK,MAAM,IAAI,UAAU,IAAI,UAAU,CAAC;IACxD,CAAC;IAEM,SAAS,CAAC,UAAkC,EAAE,IAAU,EAAE,SAAqB;QACpF,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC;QAClC,IAAI,QAAmC,CAAC;QACxC,KAAK,MAAM,KAAK,IAAI,uBAAuB,CAAC,YAAY,EAAE;YACxD,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC3B,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,WAAI,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC7D,MAAM;aACP;SACF;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;;AA9BH,0DA+BC;AA9ByB,oCAAY,GAAsC;IACxE;QACE,KAAK,EAAE,6DAA6D;QACpE,IAAI,EAAE,UAAU;KACjB;IACD;QACE,KAAK,EAAE,uDAAuD;QAC9D,IAAI,EAAE,UAAU;KACjB;IACD,EAAE,KAAK,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE;IAC7C,EAAE,KAAK,EAAE,yCAAyC,EAAE,IAAI,EAAE,MAAM,EAAE;IAClE,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAE;IAC5C,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE;CACnC,CAAC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IItemScope } from '../IItemScope';\nimport { Util } from '../Util';\nimport type { IItemPropertyHandler } from './IItemPropertyHandler';\n\n/**\n * Handler for an item property for time tags.\n */\nexport class ItemPropertyHandlerTime implements IItemPropertyHandler {\n  private static readonly TIME_REGEXES: { regex: RegExp; type: string }[] = [\n    {\n      regex: /^-?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d)?S)?)?$/u,\n      type: 'duration',\n    },\n    {\n      regex: /^\\d+-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d((Z?)|([+-]\\d\\d:\\d\\d))$/u,\n      type: 'dateTime',\n    },\n    { regex: /^\\d+-\\d\\d-\\d\\dZ?$/u, type: 'date' },\n    { regex: /^\\d\\d:\\d\\d:\\d\\d((Z?)|([+-]\\d\\d:\\d\\d))$/u, type: 'time' },\n    { regex: /^\\d+-\\d\\d$/u, type: 'gYearMonth' },\n    { regex: /^\\d+$/u, type: 'gYear' },\n  ];\n\n  public canHandle(tagName: string, attributes: Record<string, string>): boolean {\n    return tagName === 'time' && 'datetime' in attributes;\n  }\n\n  public getObject(attributes: Record<string, string>, util: Util, itemScope: IItemScope): RDF.Quad_Object {\n    const value = attributes.datetime;\n    let datatype: RDF.NamedNode | undefined;\n    for (const entry of ItemPropertyHandlerTime.TIME_REGEXES) {\n      if (entry.regex.test(value)) {\n        datatype = util.dataFactory.namedNode(Util.XSD + entry.type);\n        break;\n      }\n    }\n    return util.dataFactory.literal(value, datatype);\n  }\n}\n"]}