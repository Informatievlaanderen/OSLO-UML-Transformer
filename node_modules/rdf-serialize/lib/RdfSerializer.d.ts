/// <reference types="node" />
import { Actor } from "@comunica/core";
import * as RDF from "@rdfjs/types";
import { MediatorRdfSerializeHandle, MediatorRdfSerializeMediaTypes } from '@comunica/bus-rdf-serialize';
/**
 * An RdfSerializer can serialize to any RDF serialization, based on a given content type.
 */
export declare class RdfSerializer<Q extends RDF.BaseQuad = RDF.Quad> {
    static readonly CONTENT_MAPPINGS: {
        [id: string]: string;
    };
    readonly mediatorRdfSerializeMediatypes: MediatorRdfSerializeMediaTypes;
    readonly mediatorRdfSerializeHandle: MediatorRdfSerializeHandle;
    constructor(args: IRdfSerializerArgs);
    /**
     * Get an array of all available content types for this serializer.
     * @return {Promise<string[]>} A promise resolving to a string array of all content types.
     */
    getContentTypes(): Promise<string[]>;
    /**
     * Get a hash of all available content types for this serializer, mapped to a numerical priority.
     * @return {Promise<{[p: string]: number}>} A promise resolving to a hash mapping content type to a priority number.
     */
    getContentTypesPrioritized(): Promise<{
        [contentType: string]: number;
    }>;
    /**
     * Serialize the given stream.
     * @param {NodeJS.ReadableStream} stream A string stream.
     * @param {ISerializeOptions} options Serialization options.
     * @return {Stream} An RDFJS quad stream.
     */
    serialize(stream: RDF.Stream, options: SerializeOptions): NodeJS.ReadableStream;
    /**
     * Get the content type based on the extension of the given path,
     * which can be an URL or file path.
     * @param {string} path A path.
     * @return {string} A content type or the empty string.
     */
    getContentTypeFromExtension(path: string): string;
}
export interface IRdfSerializerArgs {
    mediatorRdfSerializeMediatypes: MediatorRdfSerializeMediaTypes;
    mediatorRdfSerializeHandle: MediatorRdfSerializeHandle;
    actors: Actor<any, any, any>[];
}
export type SerializeOptions = {
    /**
     * The content type of the needed serialization.
     */
    contentType: string;
} | {
    /**
     * The file name or URL that will be serialized to.
     */
    path: string;
};
