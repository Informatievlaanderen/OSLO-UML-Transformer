"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdfParser = void 0;
const core_1 = require("@comunica/core");
const readable_stream_1 = require("readable-stream");
const mediaMappings_1 = require("./mediaMappings");
/**
 * An RdfParser can parse any RDF serialization, based on a given content type.
 */
class RdfParser {
    constructor(args) {
        this.mediatorRdfParseMediatypes = args.mediatorRdfParseMediatypes;
        this.mediatorRdfParseHandle = args.mediatorRdfParseHandle;
    }
    /**
     * Get an array of all available content types for this parser.
     * @return {Promise<string[]>} A promise resolving to a string array of all content types.
     */
    async getContentTypes() {
        return Object.keys(await this.getContentTypesPrioritized());
    }
    /**
     * Get a hash of all available content types for this parser, mapped to a numerical priority.
     * @return {Promise<{[p: string]: number}>} A promise resolving to a hash mapping content type to a priority number.
     */
    async getContentTypesPrioritized() {
        return (await this.mediatorRdfParseMediatypes.mediate({ context: new core_1.ActionContext(), mediaTypes: true })).mediaTypes;
    }
    /**
     * Parse the given stream.
     * @param {NodeJS.ReadableStream} stream A string stream.
     * @param {IParseOptions} options Parsing options.
     * @return {Stream} An RDFJS quad stream.
     */
    parse(stream, options) {
        let contentType;
        if ('contentType' in options && options.contentType) {
            contentType = options.contentType;
        }
        else if ('path' in options && options.path) {
            contentType = this.getContentTypeFromExtension(options.path);
            if (!contentType) {
                throw new Error(`No valid extension could be detected from the given 'path' option: '${options.path}'`);
            }
        }
        else {
            throw new Error(`Missing 'contentType' or 'path' option while parsing.`);
        }
        // Create a new readable
        const readable = new readable_stream_1.PassThrough({ objectMode: true });
        // Delegate parsing to the mediator
        const context = new core_1.ActionContext(options);
        this.mediatorRdfParseHandle.mediate({
            context,
            handle: { data: stream, metadata: { baseIRI: options.baseIRI }, context },
            handleMediaType: contentType,
        })
            .then((output) => {
            const quads = output.handle.data;
            quads.on('error', (e) => readable.emit('error', e));
            quads.on('prefix', (prefix, iri) => readable.emit('prefix', prefix, iri));
            quads.on('context', (ctx) => readable.emit('context', ctx));
            quads.pipe(readable);
        })
            .catch((e) => readable.emit('error', e));
        return readable;
    }
    /**
     * Get the content type based on the extension of the given path,
     * which can be an URL or file path.
     * @param {string} path A path.
     * @return {string} A content type or the empty string.
     */
    getContentTypeFromExtension(path) {
        const dotIndex = path.lastIndexOf('.');
        if (dotIndex >= 0) {
            const ext = path.substr(dotIndex);
            // ignore dot
            return RdfParser.CONTENT_MAPPINGS[ext.substring(1)] || '';
        }
        return '';
    }
}
exports.RdfParser = RdfParser;
RdfParser.CONTENT_MAPPINGS = mediaMappings_1.default;
//# sourceMappingURL=RdfParser.js.map