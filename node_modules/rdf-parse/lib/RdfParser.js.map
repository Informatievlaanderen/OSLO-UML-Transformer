{"version":3,"file":"RdfParser.js","sourceRoot":"","sources":["RdfParser.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionContext, Actor } from \"@comunica/core\";\nimport * as RDF from \"@rdfjs/types\";\nimport { Readable, PassThrough } from \"readable-stream\";\nimport { MediatorRdfParseHandle, MediatorRdfParseMediaTypes } from '@comunica/bus-rdf-parse';\nimport mediaMappings from \"./mediaMappings\";\n\n/**\n * An RdfParser can parse any RDF serialization, based on a given content type.\n */\nexport class RdfParser<Q extends RDF.BaseQuad = RDF.Quad>  {\n  public static readonly CONTENT_MAPPINGS: Record<string, string> = mediaMappings;\n\n  public readonly mediatorRdfParseMediatypes: MediatorRdfParseMediaTypes;\n  public readonly mediatorRdfParseHandle: MediatorRdfParseHandle;\n\n  constructor(args: IRdfParserArgs) {\n    this.mediatorRdfParseMediatypes = args.mediatorRdfParseMediatypes;\n    this.mediatorRdfParseHandle = args.mediatorRdfParseHandle;\n  }\n\n  /**\n   * Get an array of all available content types for this parser.\n   * @return {Promise<string[]>} A promise resolving to a string array of all content types.\n   */\n  public async getContentTypes(): Promise<string[]> {\n    return Object.keys(await this.getContentTypesPrioritized());\n  }\n\n  /**\n   * Get a hash of all available content types for this parser, mapped to a numerical priority.\n   * @return {Promise<{[p: string]: number}>} A promise resolving to a hash mapping content type to a priority number.\n   */\n  public async getContentTypesPrioritized(): Promise<{[contentType: string]: number}> {\n    return (await this.mediatorRdfParseMediatypes.mediate(\n      { context: new ActionContext(), mediaTypes: true })).mediaTypes;\n  }\n\n  /**\n   * Parse the given stream.\n   * @param {NodeJS.ReadableStream} stream A string stream.\n   * @param {IParseOptions} options Parsing options.\n   * @return {Stream} An RDFJS quad stream.\n   */\n  public parse(stream: NodeJS.ReadableStream, options: ParseOptions): RDF.Stream & Readable {\n    let contentType: string;\n    if ('contentType' in options && options.contentType) {\n      contentType = options.contentType;\n    } else if ('path' in options && options.path) {\n      contentType = this.getContentTypeFromExtension(options.path);\n      if (!contentType) {\n        throw new Error(`No valid extension could be detected from the given 'path' option: '${options.path}'`);\n      }\n    } else {\n      throw new Error(`Missing 'contentType' or 'path' option while parsing.`);\n    }\n\n    // Create a new readable\n    const readable = new PassThrough({ objectMode: true });\n\n    // Delegate parsing to the mediator\n    const context = new ActionContext(options);\n    this.mediatorRdfParseHandle.mediate({\n      context,\n      handle: { data: stream, metadata: { baseIRI: <string> options.baseIRI }, context },\n      handleMediaType: contentType,\n    })\n      .then((output) => {\n        const quads = output.handle.data;\n        quads.on('error', (e) => readable.emit('error', e));\n        quads.on('prefix', (prefix, iri) => readable.emit('prefix', prefix, iri));\n        quads.on('context', (ctx) => readable.emit('context', ctx));\n        quads.pipe(readable);\n      })\n      .catch((e) => readable.emit('error', e));\n\n    return readable as unknown as Readable & RDF.Stream;\n  }\n\n  /**\n   * Get the content type based on the extension of the given path,\n   * which can be an URL or file path.\n   * @param {string} path A path.\n   * @return {string} A content type or the empty string.\n   */\n  public getContentTypeFromExtension(path: string): string {\n    const dotIndex = path.lastIndexOf('.');\n    if (dotIndex >= 0) {\n      const ext = path.substr(dotIndex);\n      // ignore dot\n      return RdfParser.CONTENT_MAPPINGS[ext.substring(1)] || '';\n    }\n    return '';\n  }\n\n}\n\nexport interface IRdfParserArgs {\n  mediatorRdfParseMediatypes: MediatorRdfParseMediaTypes;\n  mediatorRdfParseHandle: MediatorRdfParseHandle;\n  actors: Actor<any, any, any>[];\n}\n\nexport type ParseOptions = {\n  /**\n   * The content type of the incoming stream.\n   */\n  contentType: string;\n  /**\n   * An optional base IRI of stream's document.\n   */\n  baseIRI?: string;\n} | {\n  /**\n   * The file name or URL that is being parsed.\n   */\n  path: string;\n  /**\n   * An optional base IRI of stream's document.\n   */\n  baseIRI?: string;\n};\n"]}