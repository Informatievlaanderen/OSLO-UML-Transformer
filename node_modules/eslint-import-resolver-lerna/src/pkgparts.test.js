"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const chai_1 = require("chai");
const pkgparts_1 = require("./pkgparts");
const expectations = [
    ['pkg', ['pkg', null]],
    ['pkg/file', ['pkg', 'file']],
    ['pkg/file.js', ['pkg', 'file.js']],
    ['pkg/lib/file', ['pkg', 'lib/file']],
    ['pkg/lib/file.js', ['pkg', 'lib/file.js']],
    ['@scope/pkg', ['@scope/pkg', null]],
    ['@scope/pkg/file', ['@scope/pkg', 'file']],
    ['@scope/pkg/file.js', ['@scope/pkg', 'file.js']],
    ['@scope/pkg/lib/file', ['@scope/pkg', 'lib/file']],
    ['@scope/pkg/lib/file.js', ['@scope/pkg', 'lib/file.js']],
];
mocha_1.describe('pgkparts()', () => {
    mocha_1.it('exists', () => {
        chai_1.expect(pkgparts_1.pkgparts).to.be.a('function');
    });
    mocha_1.it('returns an object with `basename` and `relpath`', () => {
        const parts = pkgparts_1.pkgparts('@scope/pkg/lib/file');
        chai_1.expect(parts).to.be.an('object');
        chai_1.expect(parts).to.have.all.keys(['basename', 'relpath']);
    });
    for (const [input, [basename, relpath]] of expectations) {
        mocha_1.it(`splits: ${input}`, () => {
            const parts = pkgparts_1.pkgparts(input);
            chai_1.expect(parts).to.be.an('object');
            chai_1.expect(parts.basename).to.equal(basename);
            chai_1.expect(parts.relpath).to.equal(relpath);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGtncGFydHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBrZ3BhcnRzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBb0M7QUFDcEMsK0JBQTZCO0FBQzdCLHlDQUFxQztBQUdyQyxNQUFNLFlBQVksR0FBcUQ7SUFDckUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbkMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDckMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMzQyxDQUFDLFlBQVksRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakQsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNuRCxDQUFDLHdCQUF3QixFQUFFLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0NBQzFELENBQUE7QUFFRCxnQkFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsVUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDaEIsYUFBTSxDQUFDLG1CQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN0QyxDQUFDLENBQUMsQ0FBQTtJQUVGLFVBQUUsQ0FBQyxpREFBaUQsRUFBRSxHQUFHLEVBQUU7UUFDekQsTUFBTSxLQUFLLEdBQUcsbUJBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1FBRTdDLGFBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNoQyxhQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFDLENBQUE7SUFHRixLQUFLLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxZQUFZLEVBQUU7UUFDdkQsVUFBRSxDQUFDLFdBQVcsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQzFCLE1BQU0sS0FBSyxHQUFHLG1CQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7WUFFN0IsYUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ2hDLGFBQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUN6QyxhQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDekMsQ0FBQyxDQUFDLENBQUE7S0FDSDtBQUNILENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0IH0gZnJvbSAnbW9jaGEnXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJ1xuaW1wb3J0IHsgcGtncGFydHMgfSBmcm9tICcuL3BrZ3BhcnRzJ1xuXG50eXBlIEV4cGVjdGF0aW9uID0gW2Jhc2VuYW1lOiBzdHJpbmcsIHJlbHBhdGg6IHN0cmluZyB8IG51bGxdXG5jb25zdCBleHBlY3RhdGlvbnM6IEFycmF5PFtpbnB1dDogc3RyaW5nLCBleHBlY3RhdGlvbjogRXhwZWN0YXRpb25dPiA9IFtcbiAgWydwa2cnLCBbJ3BrZycsIG51bGxdXSxcbiAgWydwa2cvZmlsZScsIFsncGtnJywgJ2ZpbGUnXV0sXG4gIFsncGtnL2ZpbGUuanMnLCBbJ3BrZycsICdmaWxlLmpzJ11dLFxuICBbJ3BrZy9saWIvZmlsZScsIFsncGtnJywgJ2xpYi9maWxlJ11dLFxuICBbJ3BrZy9saWIvZmlsZS5qcycsIFsncGtnJywgJ2xpYi9maWxlLmpzJ11dLFxuICBbJ0BzY29wZS9wa2cnLCBbJ0BzY29wZS9wa2cnLCBudWxsXV0sXG4gIFsnQHNjb3BlL3BrZy9maWxlJywgWydAc2NvcGUvcGtnJywgJ2ZpbGUnXV0sXG4gIFsnQHNjb3BlL3BrZy9maWxlLmpzJywgWydAc2NvcGUvcGtnJywgJ2ZpbGUuanMnXV0sXG4gIFsnQHNjb3BlL3BrZy9saWIvZmlsZScsIFsnQHNjb3BlL3BrZycsICdsaWIvZmlsZSddXSxcbiAgWydAc2NvcGUvcGtnL2xpYi9maWxlLmpzJywgWydAc2NvcGUvcGtnJywgJ2xpYi9maWxlLmpzJ11dLFxuXVxuXG5kZXNjcmliZSgncGdrcGFydHMoKScsICgpID0+IHtcbiAgaXQoJ2V4aXN0cycsICgpID0+IHtcbiAgICBleHBlY3QocGtncGFydHMpLnRvLmJlLmEoJ2Z1bmN0aW9uJylcbiAgfSlcblxuICBpdCgncmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgYmFzZW5hbWVgIGFuZCBgcmVscGF0aGAnLCAoKSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSBwa2dwYXJ0cygnQHNjb3BlL3BrZy9saWIvZmlsZScpXG5cbiAgICBleHBlY3QocGFydHMpLnRvLmJlLmFuKCdvYmplY3QnKVxuICAgIGV4cGVjdChwYXJ0cykudG8uaGF2ZS5hbGwua2V5cyhbJ2Jhc2VuYW1lJywgJ3JlbHBhdGgnXSlcbiAgfSlcblxuXG4gIGZvciAoY29uc3QgW2lucHV0LCBbYmFzZW5hbWUsIHJlbHBhdGhdXSBvZiBleHBlY3RhdGlvbnMpIHtcbiAgICBpdChgc3BsaXRzOiAke2lucHV0fWAsICgpID0+IHtcbiAgICAgIGNvbnN0IHBhcnRzID0gcGtncGFydHMoaW5wdXQpXG5cbiAgICAgIGV4cGVjdChwYXJ0cykudG8uYmUuYW4oJ29iamVjdCcpXG4gICAgICBleHBlY3QocGFydHMuYmFzZW5hbWUpLnRvLmVxdWFsKGJhc2VuYW1lKVxuICAgICAgZXhwZWN0KHBhcnRzLnJlbHBhdGgpLnRvLmVxdWFsKHJlbHBhdGgpXG4gICAgfSlcbiAgfVxufSlcbiJdfQ==