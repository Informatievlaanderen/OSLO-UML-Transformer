"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const mocha_1 = require("mocha");
const chai_1 = require("chai");
const _1 = require(".");
const fakeroot = path.resolve(__dirname, '.fixtures/packages');
const expectations = [
    ['pkg', path.resolve(fakeroot, 'pkg/index.js')],
    ['pkg/file', path.resolve(fakeroot, 'pkg/file.js')],
    ['pkg/file.js', path.resolve(fakeroot, 'pkg/file.js')],
    ['@scope/pkg', path.resolve(fakeroot, 'scope-pkg/index.js')],
    ['@scope/pkg/file', path.resolve(fakeroot, 'scope-pkg/file.js')],
    ['@scope/pkg/file.js', path.resolve(fakeroot, 'scope-pkg/file.js')],
    ['main-pkg', path.resolve(fakeroot, 'main-pkg/main.js')],
    ['main-pkg/file', path.resolve(fakeroot, 'main-pkg/file.js')],
];
mocha_1.describe('resolve()', () => {
    mocha_1.it('exists', () => {
        chai_1.expect(_1.resolve).to.be.a('function');
    });
    for (const [importpath, expectation] of expectations) {
        mocha_1.it(`resolves: ${importpath}`, () => {
            const outcome = _1.resolve(importpath, __filename, { packages: fakeroot });
            chai_1.expect(outcome.found).to.equal(Boolean(expectation));
            chai_1.expect(outcome.path).to.equal(path.resolve(fakeroot, expectation));
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVzb2x2ZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTRCO0FBQzVCLGlDQUFvQztBQUNwQywrQkFBNkI7QUFDN0Isd0JBQTJCO0FBRTNCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLG9CQUFvQixDQUFDLENBQUE7QUFDOUQsTUFBTSxZQUFZLEdBQWdEO0lBQ2hFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQy9DLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3RELENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDNUQsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hFLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNuRSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3hELENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDLENBQUM7Q0FDOUQsQ0FBQTtBQUVELGdCQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUN6QixVQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUNoQixhQUFNLENBQUMsVUFBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDckMsQ0FBQyxDQUFDLENBQUE7SUFFRixLQUFLLE1BQU0sQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLElBQUksWUFBWSxFQUFFO1FBQ3BELFVBQUUsQ0FBQyxhQUFhLFVBQVUsRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUNqQyxNQUFNLE9BQU8sR0FBRyxVQUFPLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1lBRXZFLGFBQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQTtZQUNwRCxhQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQTtRQUNwRSxDQUFDLENBQUMsQ0FBQTtLQUNIO0FBQ0gsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQgfSBmcm9tICdtb2NoYSdcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknXG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAnLidcblxuY29uc3QgZmFrZXJvb3QgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLmZpeHR1cmVzL3BhY2thZ2VzJylcbmNvbnN0IGV4cGVjdGF0aW9uczogQXJyYXk8W2ltcG9ydHBhdGg6IHN0cmluZywgcmVzdWx0OiBzdHJpbmddPiA9IFtcbiAgWydwa2cnLCBwYXRoLnJlc29sdmUoZmFrZXJvb3QsICdwa2cvaW5kZXguanMnKV0sXG4gIFsncGtnL2ZpbGUnLCBwYXRoLnJlc29sdmUoZmFrZXJvb3QsICdwa2cvZmlsZS5qcycpXSxcbiAgWydwa2cvZmlsZS5qcycsIHBhdGgucmVzb2x2ZShmYWtlcm9vdCwgJ3BrZy9maWxlLmpzJyldLFxuICBbJ0BzY29wZS9wa2cnLCBwYXRoLnJlc29sdmUoZmFrZXJvb3QsICdzY29wZS1wa2cvaW5kZXguanMnKV0sXG4gIFsnQHNjb3BlL3BrZy9maWxlJywgcGF0aC5yZXNvbHZlKGZha2Vyb290LCAnc2NvcGUtcGtnL2ZpbGUuanMnKV0sXG4gIFsnQHNjb3BlL3BrZy9maWxlLmpzJywgcGF0aC5yZXNvbHZlKGZha2Vyb290LCAnc2NvcGUtcGtnL2ZpbGUuanMnKV0sXG4gIFsnbWFpbi1wa2cnLCBwYXRoLnJlc29sdmUoZmFrZXJvb3QsICdtYWluLXBrZy9tYWluLmpzJyldLFxuICBbJ21haW4tcGtnL2ZpbGUnLCBwYXRoLnJlc29sdmUoZmFrZXJvb3QsICdtYWluLXBrZy9maWxlLmpzJyldLFxuXVxuXG5kZXNjcmliZSgncmVzb2x2ZSgpJywgKCkgPT4ge1xuICBpdCgnZXhpc3RzJywgKCkgPT4ge1xuICAgIGV4cGVjdChyZXNvbHZlKS50by5iZS5hKCdmdW5jdGlvbicpXG4gIH0pXG5cbiAgZm9yIChjb25zdCBbaW1wb3J0cGF0aCwgZXhwZWN0YXRpb25dIG9mIGV4cGVjdGF0aW9ucykge1xuICAgIGl0KGByZXNvbHZlczogJHtpbXBvcnRwYXRofWAsICgpID0+IHtcbiAgICAgIGNvbnN0IG91dGNvbWUgPSByZXNvbHZlKGltcG9ydHBhdGgsIF9fZmlsZW5hbWUsIHsgcGFja2FnZXM6IGZha2Vyb290IH0pXG5cbiAgICAgIGV4cGVjdChvdXRjb21lLmZvdW5kKS50by5lcXVhbChCb29sZWFuKGV4cGVjdGF0aW9uKSlcbiAgICAgIGV4cGVjdChvdXRjb21lLnBhdGgpLnRvLmVxdWFsKHBhdGgucmVzb2x2ZShmYWtlcm9vdCwgZXhwZWN0YXRpb24pKVxuICAgIH0pXG4gIH1cbn0pXG4iXX0=