{"version":3,"file":"JsonLdSerializer.js","sourceRoot":"","sources":["JsonLdSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter = NodeJS.EventEmitter;\nimport {ContextParser, JsonLdContextNormalized, JsonLdContext} from \"jsonld-context-parser\";\nimport * as RDF from \"@rdfjs/types\";\nimport {SeparatorType} from \"./SeparatorType\";\nimport {ITermToValueOptions, Util} from \"./Util\";\nimport {PassThrough, Transform} from \"readable-stream\";\n\n/**\n * A stream transformer that transforms an {@link RDF.Stream} into a JSON-LD (text) stream.\n */\nexport class JsonLdSerializer extends Transform {\n\n  private readonly options: IJsonLdSerializerOptions;\n  private readonly originalContext: JsonLdContext;\n  private readonly context: Promise<JsonLdContextNormalized>;\n\n  private indentation: number;\n  private opened: boolean;\n  private lastSubject: RDF.Term;\n  private lastPredicate: RDF.Term;\n  private hadObjectForPredicate: boolean;\n  private objectOptions: ITermToValueOptions;\n  private lastGraph: RDF.Term;\n\n  constructor(options: IJsonLdSerializerOptions = {}) {\n    super({ objectMode: true });\n\n    this.indentation = 0;\n    this.options = options;\n\n    // Parse the context\n    if (this.options.baseIRI && !this.options.context) {\n      this.options.context = { '@base': this.options.baseIRI };\n    }\n    if (this.options.context) {\n      this.originalContext = this.options.context;\n      this.context = new ContextParser().parse(this.options.context, { baseIRI: this.options.baseIRI });\n    } else {\n      this.context = Promise.resolve(new JsonLdContextNormalized({}));\n    }\n  }\n\n  /**\n   * Parses the given text stream into a quad stream.\n   * @param {NodeJS.EventEmitter} stream A text stream.\n   * @return {NodeJS.EventEmitter} A quad stream.\n   */\n  public import(stream: EventEmitter): EventEmitter {\n    const output = new PassThrough({ objectMode: true });\n    stream.on('error', (error) => parsed.emit('error', error));\n    stream.on('data', (data) => output.push(data));\n    stream.on('end', () => output.push(null));\n    const parsed = output.pipe(new JsonLdSerializer(this.options));\n    return parsed;\n  }\n\n  /**\n   * Transforms a quad into the text stream.\n   * @param {Quad} quad An RDF quad.\n   * @param {string} encoding An (ignored) encoding.\n   * @param {module:stream.internal.TransformCallback} callback Callback that is invoked when the transformation is done\n   * @private\n   */\n  public _transform(quad: RDF.Quad, encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n    this.context.then((context) => {\n      this.transformQuad(quad, context);\n      callback();\n    }).catch(callback);\n  }\n\n  /**\n   * Construct a list in an RDF.Term object that can be used\n   * inside a quad's object to write into the serializer\n   * as a list using the @list keyword.\n   * @param {RDF.Quad_Object[]} values A list of values, can be empty.\n   * @return {RDF.Quad_Object} A term that should be used in the object position of the quad that is written to the serializer.\n   */\n  public async list(values: RDF.Term[]): Promise<RDF.Quad_Object> {\n    const context = await this.context;\n    return <RDF.Quad_Object> <any> {\n      '@list': values.map((value) => Util.termToValue(value, context, this.options)),\n    };\n  }\n\n  /**\n   * Called when the incoming stream is closed.\n   * @param {module:stream.internal.TransformCallback} callback Callback that is invoked when the flushing is done.\n   * @private\n   */\n  public _flush(callback: (error?: Error | null, data?: any) => void): void {\n    // If the stream was empty, ensure that we push the opening array\n    if (!this.opened) {\n      this.pushDocumentStart();\n    }\n\n    if (this.lastPredicate) {\n      this.endPredicate();\n    }\n    if (this.lastSubject) {\n      this.endSubject();\n    }\n    if (this.lastGraph && this.lastGraph.termType !== 'DefaultGraph') {\n      this.endGraph();\n    }\n\n    this.endDocument();\n    return callback(null, null);\n  }\n\n  /**\n   * Transforms a quad into the text stream.\n   * @param {Quad} quad An RDF quad.\n   * @param {JsonLdContextNormalized} context A context for compacting.\n   */\n  protected transformQuad(quad: RDF.Quad, context: JsonLdContextNormalized): void {\n    // Open the array before the first quad\n    if (!this.opened) {\n      this.pushDocumentStart();\n    }\n\n    // Check if the subject equals the last named graph\n    // In that case, we can reuse the already-existing @id node\n    const lastGraphMatchesSubject = this.lastGraph && this.lastGraph.termType !== 'DefaultGraph'\n      && this.lastGraph.equals(quad.subject);\n\n    // Write graph\n    if (!lastGraphMatchesSubject && (!this.lastGraph || !quad.graph.equals(this.lastGraph))) {\n      // Check if the named graph equals the last subject\n      // In that case, we can reuse the already-existing @id node\n      let lastSubjectMatchesGraph = quad.graph.termType !== 'DefaultGraph'\n        && this.lastSubject && this.lastSubject.equals(quad.graph);\n\n      if (this.lastGraph) {\n        if (this.lastGraph.termType !== 'DefaultGraph') {\n          // The last graph was named\n          this.endPredicate();\n          this.endSubject();\n          this.endGraph(true);\n\n          lastSubjectMatchesGraph = false; // Special-case to avoid deeper nesting\n        } else {\n          // The last graph was default\n          if (!lastSubjectMatchesGraph) {\n            this.endPredicate();\n            this.endSubject(true);\n          } else {\n            this.endPredicate(true);\n            this.lastSubject = null;\n          }\n        }\n      }\n\n      // Push the graph\n      if (quad.graph.termType !== 'DefaultGraph') {\n        if (!lastSubjectMatchesGraph) {\n          this.pushId(quad.graph, true, context);\n        }\n        this.pushSeparator(this.options.space\n          ? SeparatorType.GRAPH_FIELD_NONCOMPACT : SeparatorType.GRAPH_FIELD_COMPACT);\n        this.indentation++;\n      }\n\n      this.lastGraph = quad.graph;\n    }\n\n    // Write subject\n    if (!this.lastSubject || !quad.subject.equals(this.lastSubject)) {\n      if (lastGraphMatchesSubject) {\n        this.endPredicate();\n        this.endSubject();\n        this.indentation--;\n        this.pushSeparator(SeparatorType.ARRAY_END_COMMA);\n        this.lastGraph = quad.graph;\n      } else {\n        if (this.lastSubject) {\n          this.endPredicate();\n          this.endSubject(true);\n        }\n\n        // Open a new node for the new subject\n        this.pushId(quad.subject, true, context);\n      }\n      this.lastSubject = quad.subject;\n    }\n\n    // Write predicate\n    if (!this.lastPredicate || !quad.predicate.equals(this.lastPredicate)) {\n      if (this.lastPredicate) {\n        this.endPredicate(true);\n      }\n\n      // Open a new array for the new predicate\n      this.pushPredicate(quad.predicate, context);\n    }\n\n    // Write the object value\n    this.pushObject(quad.object, context);\n  }\n\n  protected pushDocumentStart() {\n    this.opened = true;\n\n    if (this.originalContext && !this.options.excludeContext) {\n      this.pushSeparator(SeparatorType.OBJECT_START);\n      this.indentation++;\n      this.pushSeparator(SeparatorType.CONTEXT_FIELD);\n      this.pushIndented(JSON.stringify(this.originalContext, null, this.options.space) + ',');\n      this.pushSeparator(this.options.space\n        ? SeparatorType.GRAPH_FIELD_NONCOMPACT : SeparatorType.GRAPH_FIELD_COMPACT);\n      this.indentation++;\n    } else {\n      this.pushSeparator(SeparatorType.ARRAY_START);\n      this.indentation++;\n    }\n  }\n\n  /**\n   * Push the given term as an @id field.\n   * @param {Term} term An RDF term.\n   * @param startOnNewLine If `{` should start on a new line\n   * @param {JsonLdContextNormalized} context The context.\n   */\n  protected pushId(term: RDF.Term, startOnNewLine: boolean, context: JsonLdContextNormalized) {\n    if (term.termType === 'Quad') {\n      this.pushNestedQuad(term, true, context);\n    } else {\n      const subjectValue = term.termType === 'BlankNode'\n        ? '_:' + term.value : context.compactIri(term.value, false);\n      if (startOnNewLine) {\n        this.pushSeparator(SeparatorType.OBJECT_START);\n      } else {\n        this.push(SeparatorType.OBJECT_START.label);\n        if (this.options.space) {\n          this.push('\\n');\n        }\n      }\n      this.indentation++;\n      this.pushIndented(this.options.space ? `\"@id\": \"${subjectValue}\",` : `\"@id\":\"${subjectValue}\",`);\n    }\n  }\n\n  /**\n   * Push the given predicate field.\n   * @param {Term} predicate An RDF term.\n   * @param {JsonLdContextNormalized} context The context.\n   */\n  protected pushPredicate(predicate: RDF.Term, context: JsonLdContextNormalized) {\n    let property = predicate.value;\n\n    // Convert rdf:type into @type if not disabled.\n    if (!this.options.useRdfType && property === Util.RDF_TYPE) {\n      property = '@type';\n      this.objectOptions = { ...this.options, compactIds: true, vocab: true };\n    }\n\n    // Open array for following objects\n    const compactedProperty = context.compactIri(property, true);\n    this.pushIndented(this.options.space ? `\"${compactedProperty}\": [` : `\"${compactedProperty}\":[`);\n    this.indentation++;\n\n    this.lastPredicate = predicate;\n  }\n\n  /**\n   * Push the given object value.\n   * @param {Term} object An RDF term.\n   * @param {JsonLdContextNormalized} context The context.\n   */\n  protected pushObject(object: RDF.Term, context: JsonLdContextNormalized) {\n    // Add a comma if we already had an object for this predicate\n    if (!this.hadObjectForPredicate) {\n      this.hadObjectForPredicate = true;\n    } else {\n      this.pushSeparator(SeparatorType.COMMA);\n    }\n\n    // Handle nested quad\n    if (object.termType === 'Quad') {\n      const lastLastSubject = this.lastSubject;\n      const lastLastPredicate = this.lastPredicate;\n      this.hadObjectForPredicate = false;\n\n      this.pushNestedQuad(object, false, context);\n      this.endSubject(false); // Terminate identifier node of nested quad again, since we won't attach additional information to it.\n\n      this.hadObjectForPredicate = true;\n      this.lastPredicate = lastLastPredicate;\n      this.lastSubject = lastLastSubject;\n      return;\n    }\n\n    // Convert the object into a value and push it\n    let value;\n    try {\n      if ((<any> object)['@list']) {\n        value = object;\n      } else {\n        value = Util.termToValue(object, context, this.objectOptions || this.options);\n      }\n    } catch (e) {\n      return this.emit('error', e);\n    }\n    this.pushIndented(JSON.stringify(value, null, this.options.space));\n  }\n\n  protected pushNestedQuad(nestedQuad: RDF.BaseQuad, commaAfterSubject: boolean, context: JsonLdContextNormalized) {\n    // Start a nested quad\n    this.pushSeparator(SeparatorType.OBJECT_START);\n    this.indentation++;\n    this.pushIndented(this.options.space ? `\"@id\": ` : `\"@id\":`, false);\n\n    // Print the nested quad\n    if (nestedQuad.graph.termType !== 'DefaultGraph') {\n      this.emit('error', new Error(`Found a nested quad with the non-default graph: ${nestedQuad.graph.value}`));\n    }\n    this.pushId(nestedQuad.subject, false, context);\n    this.pushPredicate(nestedQuad.predicate, context);\n    this.pushObject(nestedQuad.object, context);\n    this.endPredicate(false);\n    this.endSubject(commaAfterSubject);\n  }\n\n  protected endDocument() {\n    this.opened = false;\n    if (this.originalContext && !this.options.excludeContext) {\n      this.indentation--;\n      this.pushSeparator(SeparatorType.ARRAY_END);\n      this.indentation--;\n      this.pushSeparator(SeparatorType.OBJECT_END);\n    } else {\n      this.indentation--;\n      this.pushSeparator(SeparatorType.ARRAY_END);\n    }\n  }\n\n  /**\n   * Push the end of a predicate and reset the buffers.\n   * @param {boolean} comma If a comma should be appended.\n   */\n  protected endPredicate(comma?: boolean) {\n    // Close the predicate array\n    this.indentation--;\n    this.pushSeparator(comma ? SeparatorType.ARRAY_END_COMMA : SeparatorType.ARRAY_END);\n\n    // Reset object buffer\n    this.hadObjectForPredicate = false;\n    this.objectOptions = null;\n\n    // Reset predicate buffer\n    this.lastPredicate = null;\n  }\n\n  /**\n   * Push the end of a subject and reset the buffers.\n   * @param {boolean} comma If a comma should be appended.\n   */\n  protected endSubject(comma?: boolean) {\n    // Close the last subject's node;\n    this.indentation--;\n    this.pushSeparator(comma ? SeparatorType.OBJECT_END_COMMA : SeparatorType.OBJECT_END);\n\n    // Reset subject buffer\n    this.lastSubject = null;\n  }\n\n  /**\n   * Push the end of a graph and reset the buffers.\n   * @param {boolean} comma If a comma should be appended.\n   */\n  protected endGraph(comma?: boolean) {\n    // Close the graph array\n    this.indentation--;\n    this.pushSeparator(SeparatorType.ARRAY_END);\n    // Close the graph id node\n    this.indentation--;\n    this.pushSeparator(comma ? SeparatorType.OBJECT_END_COMMA : SeparatorType.OBJECT_END);\n\n    // Reset graph buffer\n    this.lastGraph = null;\n  }\n\n  /**\n   * Puh the given separator.\n   * @param {SeparatorType} type A type of separator.\n   */\n  protected pushSeparator(type: SeparatorType) {\n    this.pushIndented(type.label);\n  }\n\n  /**\n   * An indentation-aware variant of {@link #push}.\n   * All strings that are pushed here will be prefixed by {@link #indentation} amount of spaces.\n   * @param {string} data A string.\n   * @param pushNewLine If a newline should be pushed afterwards.\n   */\n  protected pushIndented(data: string, pushNewLine: boolean = true) {\n    const prefix = this.getIndentPrefix();\n    const lines = data.split('\\n').map((line) => prefix + line).join('\\n');\n    this.push(lines);\n    if (this.options.space && pushNewLine) {\n      this.push('\\n');\n    }\n  }\n\n  /**\n   * @return {string} Get the current indentation prefix based on {@link #indentation}.\n   */\n  protected getIndentPrefix(): string {\n    return this.options.space ? this.options.space.repeat(this.indentation) : '';\n  }\n\n}\n\n/**\n * Constructor arguments for {@link JsonLdSerializer}\n */\nexport interface IJsonLdSerializerOptions {\n  /**\n   * The indentation string that should be used when stringifying JSON.\n   * Defaults to undefined.\n   */\n  space?: string;\n  /**\n   * If '@id' objects without other entries should be compacted.\n   * Defaults to false.\n   */\n  compactIds?: boolean;\n  /**\n   * If rdf:type predicates should be emitted directly, instead of @type.\n   * Defaults to false.\n   */\n  useRdfType?: boolean;\n  /**\n   * If literals should be converted to primitive types, such as booleans and integers.\n   * Defaults to false.\n   */\n  useNativeTypes?: boolean;\n  /**\n   * An optional base IRI for compacting terms.\n   * Defaults to null.\n   */\n  baseIRI?: string;\n  /**\n   * An optional JSON-LD context for compacting terms.\n   * Defaults to null.\n   */\n  context?: JsonLdContext;\n  /**\n   * If the context should not be serialized, even if one was supplied.\n   * This can be used if the context will be attached to the document through alternative means.\n   * Defaults to false.\n   */\n  excludeContext?: boolean;\n  /**\n   * The mode by which the values with a certain base direction should be transformed from RDF.\n   * * 'i18n-datatype': objects have a https://www.w3.org/ns/i18n# datatype.\n   * * 'compound-literal': reified values using rdf:value, rdf:direction and rdf:language.\n   */\n  rdfDirection?: 'i18n-datatype' | 'compound-literal';\n}\n"]}