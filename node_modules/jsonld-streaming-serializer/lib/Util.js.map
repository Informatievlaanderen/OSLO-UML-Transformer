{"version":3,"file":"Util.js","sourceRoot":"","sources":["Util.ts"],"names":[],"mappings":"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","sourcesContent":["import {ERROR_CODES, ErrorCoded, JsonLdContextNormalized} from \"jsonld-context-parser\";\nimport * as RDF from \"@rdfjs/types\";\n\n/**\n * Utility functions and methods.\n */\nexport class Util {\n\n  public static readonly XSD: string = 'http://www.w3.org/2001/XMLSchema#';\n  public static readonly XSD_STRING: string = Util.XSD + 'string';\n  public static readonly RDF: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n  public static readonly RDF_TYPE: string = Util.RDF + 'type';\n  public static readonly RDF_JSON: string = Util.RDF + 'JSON';\n  public static readonly I18N: string = 'https://www.w3.org/ns/i18n#';\n\n  /**\n   * Convert an RDF term to a JSON value.\n   * @param {Term} term An RDF term.\n   * @param {JsonLdContextNormalized} context The context.\n   * @param {ITermToValueOptions} options Conversion options.\n   * @return {any} A JSON value.\n   */\n  public static termToValue(term: RDF.Term, context: JsonLdContextNormalized, options: ITermToValueOptions = {\n    compactIds: false,\n    useNativeTypes: false,\n  }): any {\n    switch (term.termType) {\n    case 'NamedNode':\n      const compacted = context.compactIri(term.value, options.vocab);\n      return options.compactIds ? compacted : { '@id': compacted };\n    case 'DefaultGraph':\n      return options.compactIds ? term.value : { '@id': term.value };\n    case 'BlankNode':\n      const id = `_:${term.value}`;\n      return options.compactIds ? id : { '@id': id };\n    case 'Literal':\n      // Handle JSON datatype\n      if (term.datatype.value === Util.RDF_JSON) {\n        let parsedJson: any;\n        try {\n          parsedJson = JSON.parse(term.value);\n        } catch (e) {\n          throw new ErrorCoded('Invalid JSON literal: ' + e.message, ERROR_CODES.INVALID_JSON_LITERAL);\n        }\n        return {\n          '@value': parsedJson,\n          '@type': '@json',\n        };\n      }\n\n      // Handle rdfDirection: i18n-datatype\n      if (options.rdfDirection === 'i18n-datatype' && term.datatype.value.startsWith(Util.I18N)) {\n        const [language, direction] = term.datatype.value\n          .substr(Util.I18N.length, term.datatype.value.length)\n          .split('_');\n        return {\n          '@value': term.value,\n          ...language ? { '@language': language } : {},\n          ...direction ? { '@direction': direction } : {},\n        };\n      }\n\n      const stringType = term.datatype.value === Util.XSD_STRING;\n      const rawValue = {\n        '@value': !stringType && options.useNativeTypes\n          ? Util.stringToNativeType(term.value, term.datatype.value) : term.value,\n      };\n      if (term.language) {\n        return { ...rawValue, '@language': term.language };\n      } else if (!stringType && typeof rawValue['@value'] === 'string') {\n        return { ...rawValue, '@type': term.datatype.value };\n      } else {\n        return rawValue;\n      }\n    }\n  }\n\n  /**\n   * Convert a string term to a native type.\n   * If no conversion is possible, the original string will be returned.\n   * @param {string} value An RDF term's string value.\n   * @param {string} type\n   * @return {any}\n   */\n  public static stringToNativeType(value: string, type: string): any {\n    if (type.startsWith(Util.XSD)) {\n      const xsdType = type.substr(Util.XSD.length);\n      switch (xsdType) {\n      case 'boolean':\n        if (value === 'true') {\n          return true;\n        } else if (value === 'false') {\n          return false;\n        }\n        throw new Error(`Invalid xsd:boolean value '${value}'`);\n      case 'integer':\n      case 'number':\n      case 'int':\n      case 'byte':\n      case 'long':\n        const parsedInt = parseInt(value, 10);\n        if (isNaN(parsedInt)) {\n          throw new Error(`Invalid xsd:integer value '${value}'`);\n        }\n        return parsedInt;\n      case 'float':\n      case 'double':\n        const parsedFloat = parseFloat(value);\n        if (isNaN(parsedFloat)) {\n          throw new Error(`Invalid xsd:float value '${value}'`);\n        }\n        return parsedFloat;\n      }\n    }\n    return value;\n  }\n\n}\n\nexport interface ITermToValueOptions {\n  /**\n   * If '@id' objects without other entries should be compacted.\n   */\n  compactIds?: boolean;\n  /**\n   * If literals should be converted to primitive types, such as booleans and integers.\n   * Defaults to false.\n   */\n  useNativeTypes?: boolean;\n  /**\n   * If vocab-mode should be used for term compacting.\n   * Defaults to false.\n   */\n  vocab?: boolean;\n  /**\n   * The mode by which the values with a certain base direction should be transformed from RDF.\n   * * 'i18n-datatype': objects have a https://www.w3.org/ns/i18n# datatype.\n   * * 'compound-literal': reified values using rdf:value, rdf:direction and rdf:language.\n   */\n  rdfDirection?: 'i18n-datatype' | 'compound-literal';\n}\n"]}