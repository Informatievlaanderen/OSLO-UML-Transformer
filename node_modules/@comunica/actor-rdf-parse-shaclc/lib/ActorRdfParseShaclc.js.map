{"version":3,"file":"ActorRdfParseShaclc.js","sourceRoot":"","sources":["ActorRdfParseShaclc.ts"],"names":[],"mappings":";;;AAKA,2DAEiC;AAEjC,qDAA2C;AAC3C,+CAAqC;AACrC,mDAAoD;AACpD,qEAAkE;AAElE;;GAEG;AACH,MAAa,mBAAoB,SAAQ,4CAA4B;IACnE;;;;;;;;;;OAUG;IACH,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAuB,EAAE,SAAiB,EAAE,OAAuB;QAExF,MAAM,cAAc,GAAG,IAAI,+CAAsB,CAC/C,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAA,oBAAK,EAAC,GAAG,EAAE;YACjD,cAAc,EAAE,SAAS,KAAK,iBAAiB,EAAE,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,OAAO;SACnF,CAAC,CAAC,CACJ,CAAC;QAEF,MAAM,QAAQ,GAAG,IAAI,0BAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACpD,cAAc,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAE3E,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAO,cAAc,CAAC;YACzC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC5B,CAAC;IACJ,CAAC;CACF;AAhCD,kDAgCC","sourcesContent":["import type {\n  IActionRdfParse,\n  IActorRdfParseFixedMediaTypesArgs,\n  IActorRdfParseOutput,\n} from '@comunica/bus-rdf-parse';\nimport {\n  ActorRdfParseFixedMediaTypes,\n} from '@comunica/bus-rdf-parse';\nimport type { IActionContext } from '@comunica/types';\nimport { Readable } from 'readable-stream';\nimport { parse } from 'shaclc-parse';\nimport streamToString = require('stream-to-string');\nimport { PrefixWrappingIterator } from './PrefixWrappingIterator';\n\n/**\n * A comunica SHACL Compact Syntax RDF Parse Actor.\n */\nexport class ActorRdfParseShaclc extends ActorRdfParseFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"text/shaclc\": 1.0,\n   *       \"text/shaclc-ext\": 0.5\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"text/shaclc\": \"http://www.w3.org/ns/formats/Shaclc\",\n   *       \"text/shaclc-ext\": \"http://www.w3.org/ns/formats/ShaclcExtended\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfParseFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfParse, mediaType: string, context: IActionContext):\n  Promise<IActorRdfParseOutput> {\n    const prefixIterator = new PrefixWrappingIterator(\n      streamToString(action.data).then(str => parse(str, {\n        extendedSyntax: mediaType === 'text/shaclc-ext', baseIRI: action.metadata?.baseIRI,\n      })),\n    );\n\n    const readable = new Readable({ objectMode: true });\n    prefixIterator.on('prefix', (...args) => readable.emit('prefix', ...args));\n\n    return {\n      data: readable.wrap(<any> prefixIterator),\n      metadata: { triples: true },\n    };\n  }\n}\n"]}