{"version":3,"file":"PrefixWrappingIterator.js","sourceRoot":"","sources":["PrefixWrappingIterator.ts"],"names":[],"mappings":";;;AACA,iDAAiD;AAEjD;;GAEG;AACH,MAAa,sBAAuB,SAAQ,gCAAsB;IAEhE,YAAmB,MAA0E;QAC3F,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE;YACvB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;YAC7B,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;IAEM,IAAI;QACT,gEAAgE;QAChE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;aAC9B;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QAED,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;CACF;AApBD,wDAoBC","sourcesContent":["import type { Quad } from '@rdfjs/types';\nimport { WrappingIterator } from 'asynciterator';\n\n/**\n * An iterator that emits prefixes on the first read call where prefixes are available\n */\nexport class PrefixWrappingIterator extends WrappingIterator<Quad> {\n  private prefixes?: Record<string, string>;\n  public constructor(source: Promise<Quad[] & { prefixes: Record<string, string> }> | undefined) {\n    super(source?.then(src => {\n      this.prefixes = src.prefixes;\n      return src;\n    }));\n  }\n\n  public read(): Quad | null {\n    // On the first read where the prefixes are available, emit them\n    if (this.prefixes) {\n      for (const args of Object.entries(this.prefixes)) {\n        this.emit('prefix', ...args);\n      }\n      delete this.prefixes;\n    }\n\n    return super.read();\n  }\n}\n"]}