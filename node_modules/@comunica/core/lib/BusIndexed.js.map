{"version":3,"file":"BusIndexed.js","sourceRoot":"","sources":["BusIndexed.ts"],"names":[],"mappings":";;;AAEA,+BAA4B;AAE5B;;;;;;;;;;;;;;;GAeG;AACH,MAAa,UACX,SAAQ,SAAe;IAKvB;;;;;;OAMG;IACH,YAAmB,IAAqB;QACtC,KAAK,CAAC,IAAI,CAAC,CAAC;QAZK,gBAAW,GAAwB,EAAE,CAAC;IAazD,CAAC;IAEM,SAAS,CAAC,KAAQ;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC;QAChE,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;SACzC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAEM,WAAW,CAAC,KAAQ;QACzB,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC;QAChE,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACV,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACrB;YACD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aAClC;SACF;QACD,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAEM,OAAO,CAAC,MAAS;QACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,QAAQ,EAAE;YACZ,MAAM,MAAM,GAAG,CAAE,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,IAAI,EAAE,CAAE,CAAC;YAC9F,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAQ,EAA2B,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;SAClG;QACD,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAES,kBAAkB,CAAC,KAAQ;QACnC,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,MAAW,EAAE,KAAK,EAAK,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IAC5F,CAAC;IAES,mBAAmB,CAAC,MAAS;QACrC,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,MAAW,EAAE,KAAK,EAAK,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;IAC9F,CAAC;CACF;AA1DD,gCA0DC","sourcesContent":["import type { Actor, IAction, IActorOutput, IActorTest } from './Actor';\nimport type { IActorReply, IBusArgs } from './Bus';\nimport { Bus } from './Bus';\n\n/**\n * A bus that indexes identified actors,\n * so that actions with a corresponding identifier can be published more efficiently.\n *\n * Multiple actors with the same identifier can be subscribed.\n *\n * If actors or actions do not have a valid identifier,\n * then this will fallback to the normal bus behaviour.\n *\n * @see Bus\n *\n * @template A The actor type that can subscribe to the sub.\n * @template I The input type of an actor.\n * @template T The test type of an actor.\n * @template O The output type of an actor.\n */\nexport class BusIndexed<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>\n  extends Bus<A, I, T, O> {\n  protected readonly actorsIndex: Record<string, A[]> = {};\n  protected readonly actorIdentifierFields: string[];\n  protected readonly actionIdentifierFields: string[];\n\n  /**\n   * All enumerable properties from the `args` object are inherited to this bus.\n   *\n   * @param {IBusIndexedArgs} args Arguments object\n   * @param {string} args.name The name for the bus\n   * @throws When required arguments are missing.\n   */\n  public constructor(args: IBusIndexedArgs) {\n    super(args);\n  }\n\n  public subscribe(actor: A): void {\n    const actorId = this.getActorIdentifier(actor) || '_undefined_';\n    let actors = this.actorsIndex[actorId];\n    if (!actors) {\n      actors = this.actorsIndex[actorId] = [];\n    }\n    actors.push(actor);\n    super.subscribe(actor);\n  }\n\n  public unsubscribe(actor: A): boolean {\n    const actorId = this.getActorIdentifier(actor) || '_undefined_';\n    const actors = this.actorsIndex[actorId];\n    if (actors) {\n      const i = actors.indexOf(actor);\n      if (i >= 0) {\n        actors.splice(i, 1);\n      }\n      if (actors.length === 0) {\n        delete this.actorsIndex[actorId];\n      }\n    }\n    return super.unsubscribe(actor);\n  }\n\n  public publish(action: I): IActorReply<A, I, T, O>[] {\n    const actionId = this.getActionIdentifier(action);\n    if (actionId) {\n      const actors = [ ...this.actorsIndex[actionId] || [], ...this.actorsIndex._undefined_ || [] ];\n      return actors.map((actor: A): IActorReply<A, I, T, O> => ({ actor, reply: actor.test(action) }));\n    }\n    return super.publish(action);\n  }\n\n  protected getActorIdentifier(actor: A): string {\n    return this.actorIdentifierFields.reduce((object: any, field): A => object[field], actor);\n  }\n\n  protected getActionIdentifier(action: I): string {\n    return this.actionIdentifierFields.reduce((object: any, field): A => object[field], action);\n  }\n}\n\nexport interface IBusIndexedArgs extends IBusArgs {\n  actorIdentifierFields: string[];\n  actionIdentifierFields: string[];\n}\n"]}