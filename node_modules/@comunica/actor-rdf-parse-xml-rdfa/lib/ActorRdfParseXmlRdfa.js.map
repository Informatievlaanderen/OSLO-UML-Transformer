{"version":3,"file":"ActorRdfParseXmlRdfa.js","sourceRoot":"","sources":["ActorRdfParseXmlRdfa.ts"],"names":[],"mappings":";;;AAEA,2DAAuE;AAEvE,iEAAmD;AAGnD;;GAEG;AACH,MAAa,oBAAqB,SAAQ,4CAA4B;IACpE;;;;;;;;;;;;OAYG;IACH,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAuB,EAAE,SAAiB,EAAE,OAAuB;QAExF,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,SAAS,CAAC;QACzF,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5D,MAAM,IAAI,GAAkB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,kCAAU,CAAC;YAC1D,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,OAAO;YACjC,OAAO,EAAE,KAAK;YACd,QAAQ;SACT,CAAC,CAAC,CAAC;QACJ,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAC,CAAC;IAC9C,CAAC;CACF;AA7BD,oDA6BC","sourcesContent":["import type { IActionRdfParse, IActorRdfParseFixedMediaTypesArgs,\n  IActorRdfParseOutput } from '@comunica/bus-rdf-parse';\nimport { ActorRdfParseFixedMediaTypes } from '@comunica/bus-rdf-parse';\nimport type { IActionContext } from '@comunica/types';\nimport { RdfaParser } from 'rdfa-streaming-parser';\nimport type { Readable } from 'readable-stream';\n\n/**\n * A comunica XML RDFa RDF Parse Actor.\n */\nexport class ActorRdfParseXmlRdfa extends ActorRdfParseFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/xml\": 1.0,\n   *       \"text/xml\": 1.0,\n   *       \"image/svg+xml\": 1.0\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/xml\": \"http://www.w3.org/ns/formats/RDFa\",\n   *       \"text/xml\": \"http://www.w3.org/ns/formats/RDFa\",\n   *       \"image/svg+xml\": \"http://www.w3.org/ns/formats/RDFa\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfParseFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfParse, mediaType: string, context: IActionContext):\n  Promise<IActorRdfParseOutput> {\n    const language = (action.headers && action.headers.get('content-language')) ?? undefined;\n    action.data.on('error', error => data.emit('error', error));\n    const data = <Readable><any>action.data.pipe(new RdfaParser({\n      baseIRI: action.metadata?.baseIRI,\n      profile: 'xml',\n      language,\n    }));\n    return { data, metadata: { triples: true }};\n  }\n}\n"]}