{"version":3,"file":"ActorRdfParseN3.js","sourceRoot":"","sources":["ActorRdfParseN3.ts"],"names":[],"mappings":";;;AAEA,2DAAuE;AAEvE,2BAAkC;AAGlC;;;;GAIG;AACH,MAAa,eAAgB,SAAQ,4CAA4B;IAC/D;;;;;;;;;;;;;;;;OAgBG;IACH,YAAmB,IAAuC;QACxD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAuB,EAAE,SAAiB,EAAE,OAAuB;QAExF,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5D,MAAM,IAAI,GAAkB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,iBAAY,CAAC;YAC5D,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,OAAO;YACjC,+EAA+E;YAC/E,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG;SAC/D,CAAC,CAAC,CAAC;QACJ,OAAO;YACL,IAAI;YACJ,QAAQ,EAAE;gBACR,OAAO,EAAE,SAAS,KAAK,aAAa;oBACpC,SAAS,KAAK,uBAAuB;oBACrC,SAAS,KAAK,SAAS;aACxB;SACF,CAAC;IACJ,CAAC;CACF;AAvCD,0CAuCC","sourcesContent":["import type { IActionRdfParse, IActorRdfParseFixedMediaTypesArgs,\n  IActorRdfParseOutput } from '@comunica/bus-rdf-parse';\nimport { ActorRdfParseFixedMediaTypes } from '@comunica/bus-rdf-parse';\nimport type { IActionContext } from '@comunica/types';\nimport { StreamParser } from 'n3';\nimport type { Readable } from 'readable-stream';\n\n/**\n * An N3 RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse N3-based RDF serializations and announce the presence of them by media type.\n */\nexport class ActorRdfParseN3 extends ActorRdfParseFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/n-quads\": 1.0,\n   *       \"application/trig\": 0.95,\n   *       \"application/n-triples\": 0.8,\n   *       \"text/turtle\": 0.6,\n   *       \"text/n3\": 0.35\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/n-quads\": \"http://www.w3.org/ns/formats/N-Quads\",\n   *       \"application/trig\": \"http://www.w3.org/ns/formats/TriG\",\n   *       \"application/n-triples\": \"http://www.w3.org/ns/formats/N-Triples\",\n   *       \"text/turtle\": \"http://www.w3.org/ns/formats/Turtle\",\n   *       \"text/n3\": \"http://www.w3.org/ns/formats/N3\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfParseFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfParse, mediaType: string, context: IActionContext):\n  Promise<IActorRdfParseOutput> {\n    action.data.on('error', error => data.emit('error', error));\n    const data = <Readable><any>action.data.pipe(new StreamParser({\n      baseIRI: action.metadata?.baseIRI,\n      // Enable RDF-star-mode on all formats, except N3, where this is not supported.\n      format: mediaType.endsWith('n3') ? mediaType : `${mediaType}*`,\n    }));\n    return {\n      data,\n      metadata: {\n        triples: mediaType === 'text/turtle' ||\n        mediaType === 'application/n-triples' ||\n        mediaType === 'text/n3',\n      },\n    };\n  }\n}\n"]}