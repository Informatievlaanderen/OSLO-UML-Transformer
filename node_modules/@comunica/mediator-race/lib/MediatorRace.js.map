{"version":3,"file":"MediatorRace.js","sourceRoot":"","sources":["MediatorRace.ts"],"names":[],"mappings":";;;AACA,yCAA0C;AAE1C;;GAEG;AACH,MAAa,YACX,SAAQ,eAAoB;IAC5B,YAAmB,IAA+B;QAChD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAES,WAAW,CAAC,MAAS,EAAE,WAAsC;QACrE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,MAAM,GAAY,EAAE,CAAC;YAC3B,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;gBACpC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;oBACzB,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBACf,sCAAsC;oBACtC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACnB,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;wBACxC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,yCAC3B,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC3D;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAvBD,oCAuBC","sourcesContent":["import type { Actor, IAction, IActorOutput, IActorReply, IActorTest, IMediatorArgs } from '@comunica/core';\nimport { Mediator } from '@comunica/core';\n\n/**\n * A mediator that picks the first actor that resolves its test.\n */\nexport class MediatorRace<A extends Actor<I, T, O>, I extends IAction, T extends IActorTest, O extends IActorOutput>\n  extends Mediator<A, I, T, O> {\n  public constructor(args: IMediatorArgs<A, I, T, O>) {\n    super(args);\n  }\n\n  protected mediateWith(action: I, testResults: IActorReply<A, I, T, O>[]): Promise<A> {\n    return new Promise((resolve, reject) => {\n      const errors: Error[] = [];\n      for (const testResult of testResults) {\n        testResult.reply.then(() => {\n          resolve(testResult.actor);\n        }).catch(error => {\n          // Reject if all replies were rejected\n          errors.push(error);\n          if (errors.length === testResults.length) {\n            reject(new Error(`${this.name} mediated over all rejecting actors:\\n${\n              errors.map(subError => subError.message).join('\\n')}`));\n          }\n        });\n      }\n    });\n  }\n}\n"]}