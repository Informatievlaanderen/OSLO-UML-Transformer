{"version":3,"file":"ActorRdfParseHtmlMicrodata.js","sourceRoot":"","sources":["ActorRdfParseHtmlMicrodata.ts"],"names":[],"mappings":";;;AAKA,qEAAiE;AAEjE,mFAAoE;AAEpE;;GAEG;AACH,MAAa,0BAA2B,SAAQ,sCAAiB;IAC/D,YAAmB,IAA4B;QAC7C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA2B;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA2B;QAC1C,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC7E,MAAM,OAAO,GAAG,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE3C,MAAM,iBAAiB,GAAG,IAAI,mDAAkB,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvF,iBAAiB,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1C,6DAA6D;QAC7D,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC;QAC5C,iBAAiB,CAAC,KAAK,GAAG,GAAG,EAAE;YAC7B,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpC,MAAM,CAAC,GAAG,EAAE,CAAC;QACf,CAAC,CAAC;QACF,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC/B,CAAC;CACF;AAxBD,gEAwBC","sourcesContent":["import type {\n  IActionRdfParseHtml,\n  IActorRdfParseHtmlArgs,\n  IActorRdfParseHtmlOutput,\n} from '@comunica/bus-rdf-parse-html';\nimport { ActorRdfParseHtml } from '@comunica/bus-rdf-parse-html';\nimport type { IActorTest } from '@comunica/core';\nimport { MicrodataRdfParser } from 'microdata-rdf-streaming-parser';\n\n/**\n * A comunica Microdata RDF Parse Html Actor.\n */\nexport class ActorRdfParseHtmlMicrodata extends ActorRdfParseHtml {\n  public constructor(args: IActorRdfParseHtmlArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfParseHtml): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionRdfParseHtml): Promise<IActorRdfParseHtmlOutput> {\n    const mediaType = action.headers ? action.headers.get('content-type') : null;\n    const xmlMode = mediaType?.includes('xml');\n\n    const htmlParseListener = new MicrodataRdfParser({ baseIRI: action.baseIRI, xmlMode });\n    htmlParseListener.on('error', action.error);\n    htmlParseListener.on('data', action.emit);\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const onTagEndOld = htmlParseListener.onEnd;\n    htmlParseListener.onEnd = () => {\n      onTagEndOld.call(htmlParseListener);\n      action.end();\n    };\n    return { htmlParseListener };\n  }\n}\n"]}