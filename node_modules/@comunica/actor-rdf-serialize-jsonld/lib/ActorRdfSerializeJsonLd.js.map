{"version":3,"file":"ActorRdfSerializeJsonLd.js","sourceRoot":"","sources":["ActorRdfSerializeJsonLd.ts"],"names":[],"mappings":";;;AAGA,mEAEqC;AAErC,6EAA+D;AAE/D;;GAEG;AACH,MAAa,uBAAwB,SAAQ,oDAAgC;IAM3E;;;;;;;;OAQG;IACH,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA2B,EAAE,SAAiB,EAAE,OAAuB;QAE5F,MAAM,MAAM,GAAG,IAAI,8CAAgB,CACjC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAE,CACtD,CAAC;QACF,IAAI,IAA2B,CAAC;QAChC,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE;YAC/B,sDAAsD;YACtD,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YACpE,IAAI,GAAU,MAAM,CAAC,UAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC/C;aAAM;YACL,IAAI,GAAS,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SAC/C;QACD,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAlCD,0DAkCC","sourcesContent":["import type { IActionRdfSerialize,\n  IActorRdfSerializeFixedMediaTypesArgs,\n  IActorRdfSerializeOutput } from '@comunica/bus-rdf-serialize';\nimport {\n  ActorRdfSerializeFixedMediaTypes,\n} from '@comunica/bus-rdf-serialize';\nimport type { IActionContext } from '@comunica/types';\nimport { JsonLdSerializer } from 'jsonld-streaming-serializer';\n\n/**\n * A comunica Jsonld RDF Serialize Actor.\n */\nexport class ActorRdfSerializeJsonLd extends ActorRdfSerializeFixedMediaTypes {\n  /**\n   * The number of spaces that should be used to indent stringified JSON.\n   */\n  public readonly jsonStringifyIndentSpaces: number;\n\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/ld+json\": 1.0\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/ld+json\": \"http://www.w3.org/ns/formats/JSON-LD\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfSerializeJsonLdArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorRdfSerializeOutput> {\n    const writer = new JsonLdSerializer(\n      { space: ' '.repeat(this.jsonStringifyIndentSpaces) },\n    );\n    let data: NodeJS.ReadableStream;\n    if ('pipe' in action.quadStream) {\n      // Prefer piping if possible, to maintain backpressure\n      action.quadStream.on('error', error => writer.emit('error', error));\n      data = (<any> action.quadStream).pipe(writer);\n    } else {\n      data = <any> writer.import(action.quadStream);\n    }\n    return { data };\n  }\n}\n\nexport interface IActorRdfSerializeJsonLdArgs extends IActorRdfSerializeFixedMediaTypesArgs {\n  /**\n   * The number of spaces that should be used to indent stringified JSON.\n   * @range {integer}\n   * @default {2}\n   */\n  jsonStringifyIndentSpaces: number;\n}\n"]}