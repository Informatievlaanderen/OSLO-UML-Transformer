{"version":3,"file":"ActorRdfParseJsonLd.js","sourceRoot":"","sources":["ActorRdfParseJsonLd.ts"],"names":[],"mappings":";;;AAGA,2DAAuE;AACvE,+DAAuF;AAGvF,qEAAuD;AAEvD,qEAAkE;AAElE;;;;GAIG;AACH,MAAa,mBAAoB,SAAQ,4CAA4B;IAGnE;;;;;;;;;;OAUG;IACH,YAAmB,IAA8B;QAC/C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,MAAuB,EAAE,SAA6B,EAAE,OAAuB;QAErG,IAAI,OAAO,CAAC,GAAG,CAAC,wCAAsB,CAAC,oBAAoB,CAAC,IAAI,SAAS,KAAK,qBAAqB,EAAE;YACnG,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;SAC1F;QACD,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,mBAAmB,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE;YACzF,MAAM,IAAI,KAAK,CAAC,4BAA4B,SAAS,EAAE,CAAC,CAAC;SAC1D;QACD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAuB,EAAE,SAAiB,EAAE,aAA6B;QAE9F,MAAM,MAAM,GAAG,sCAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,IAAI,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,OAAO,EAAE;YACtG,cAAc,EAAE,aAAa,CAAC,GAAG,CAAC,oCAAkB,CAAC,cAAc,CAAC;gBAClE,IAAI,+CAAsB,CAAC,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;YAC9D,YAAY,EAAE,aAAa,CAAC,GAAG,CAAC,oCAAkB,CAAC,YAAY,CAAC;YAChE,GAAG,aAAa,CAAC,GAAG,CAAC,oCAAkB,CAAC,aAAa,CAAC;SACvD,CAAC,CAAC;QACH,MAAM,IAAI,GAAc,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACnD,OAAO,EAAE,IAAI,EAAE,CAAC;IAClB,CAAC;CACF;AAxCD,kDAwCC","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport type { IActionRdfParse,\n  IActorRdfParseFixedMediaTypesArgs, IActorRdfParseOutput } from '@comunica/bus-rdf-parse';\nimport { ActorRdfParseFixedMediaTypes } from '@comunica/bus-rdf-parse';\nimport { KeysRdfParseHtmlScript, KeysRdfParseJsonLd } from '@comunica/context-entries';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport { JsonLdParser } from 'jsonld-streaming-parser';\nimport type { Readable } from 'readable-stream';\nimport { DocumentLoaderMediated } from './DocumentLoaderMediated';\n\n/**\n * A JSON-LD RDF Parse actor that listens on the 'rdf-parse' bus.\n *\n * It is able to parse JSON-LD-based RDF serializations and announce the presence of them by media type.\n */\nexport class ActorRdfParseJsonLd extends ActorRdfParseFixedMediaTypes {\n  public readonly mediatorHttp: MediatorHttp;\n\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"application/ld+json\": 1.0,\n   *       \"application/json\": 0.5\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"application/ld+json\": \"http://www.w3.org/ns/formats/JSON-LD\",\n   *       \"application/json\": \"http://www.w3.org/ns/formats/JSON-LD\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfParseJsonLdArgs) {\n    super(args);\n  }\n\n  public async testHandle(action: IActionRdfParse, mediaType: string | undefined, context: IActionContext):\n  Promise<IActorTest> {\n    if (context.has(KeysRdfParseHtmlScript.processingHtmlScript) && mediaType !== 'application/ld+json') {\n      throw new Error(`JSON-LD in script tags can only have media type 'application/ld+json'`);\n    }\n    if (!mediaType || !(mediaType in this.mediaTypePriorities || mediaType.endsWith('+json'))) {\n      throw new Error(`Unrecognized media type: ${mediaType}`);\n    }\n    return await this.testHandleChecked(action);\n  }\n\n  public async runHandle(action: IActionRdfParse, mediaType: string, actionContext: IActionContext):\n  Promise<IActorRdfParseOutput> {\n    const parser = JsonLdParser.fromHttpResponse(action.metadata?.baseIRI ?? '', mediaType, action.headers, {\n      documentLoader: actionContext.get(KeysRdfParseJsonLd.documentLoader) ||\n        new DocumentLoaderMediated(this.mediatorHttp, actionContext),\n      strictValues: actionContext.get(KeysRdfParseJsonLd.strictValues),\n      ...actionContext.get(KeysRdfParseJsonLd.parserOptions),\n    });\n    const data = <Readable> parser.import(action.data);\n    return { data };\n  }\n}\n\nexport interface IActorRdfParseJsonLdArgs extends IActorRdfParseFixedMediaTypesArgs {\n  /**\n   * The HTTP mediator\n   */\n  mediatorHttp: MediatorHttp;\n}\n"]}