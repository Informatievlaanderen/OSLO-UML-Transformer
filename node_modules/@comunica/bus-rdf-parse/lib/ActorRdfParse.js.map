{"version":3,"file":"ActorRdfParse.js","sourceRoot":"","sources":["ActorRdfParse.ts"],"names":[],"mappings":";;;AAWA,mFAA8E;AAK9E;;;;;;;;;GASG;AACH,MAAsB,aAAc,SAAQ,mDAA0E;IACpH;;OAEG;IACH,YAAmB,IAAwB;QACzC,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAPD,sCAOC","sourcesContent":["import type { IActionAbstractMediaTyped,\n  IActionAbstractMediaTypedHandle, IActionAbstractMediaTypedMediaTypes,\n  IActorArgsMediaTyped,\n  IActorOutputAbstractMediaTyped,\n  IActorOutputAbstractMediaTypedHandle, IActorOutputAbstractMediaTypedMediaTypes,\n  IActorTestAbstractMediaTyped,\n  IActorTestAbstractMediaTypedHandle,\n  IActorTestAbstractMediaTypedMediaTypes,\n  IActionAbstractMediaTypedMediaTypeFormats,\n  IActorOutputAbstractMediaTypedMediaTypeFormats,\n  IActorTestAbstractMediaTypedMediaTypeFormats } from '@comunica/actor-abstract-mediatyped';\nimport { ActorAbstractMediaTyped } from '@comunica/actor-abstract-mediatyped';\nimport type { IActionParse, IActorParseOutput } from '@comunica/actor-abstract-parse';\nimport type { IActorTest, Mediate } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\n\n/**\n * A base actor for listening to RDF parse events.\n *\n * Actor types:\n * * Input:  IActionRdfParseOrMediaType:      A parse input or a media type input.\n * * Test:   <none>\n * * Output: IActorOutputRdfParseOrMediaType: The parsed quads.\n *\n * @see IActionInit\n */\nexport abstract class ActorRdfParse extends ActorAbstractMediaTyped<IActionRdfParse, IActorTest, IActorRdfParseOutput> {\n  /**\n   * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   */\n  public constructor(args: IActorRdfParseArgs) {\n    super(args);\n  }\n}\n\nexport type IActionRootRdfParse = IActionAbstractMediaTyped<IActionRdfParse>;\nexport type IActorTestRootRdfParse = IActorTestAbstractMediaTyped<IActorTest>;\nexport type IActorOutputRootRdfParse = IActorOutputAbstractMediaTyped<IActorRdfParseOutput>;\n\nexport type IActionRdfParseHandle = IActionAbstractMediaTypedHandle<IActionRdfParse>;\nexport type IActorTestRdfParseHandle = IActorTestAbstractMediaTypedHandle<IActorTest>;\nexport type IActorOutputRdfParseHandle = IActorOutputAbstractMediaTypedHandle<IActorRdfParseOutput>;\n\nexport type IActionRdfParseMediaTypes = IActionAbstractMediaTypedMediaTypes;\nexport type IActorTestRdfParseMediaTypes = IActorTestAbstractMediaTypedMediaTypes;\nexport type IActorOutputRdfParseMediaTypes = IActorOutputAbstractMediaTypedMediaTypes;\n\nexport type IActionRdfParseMediaTypeFormats = IActionAbstractMediaTypedMediaTypeFormats;\nexport type IActorTestRdfParseMediaTypeFormats = IActorTestAbstractMediaTypedMediaTypeFormats;\nexport type IActorOutputRdfParseMediaTypeFormats = IActorOutputAbstractMediaTypedMediaTypeFormats;\n\nexport interface IActionRdfParseMetadata {\n  /**\n   * The base IRI for parsed quads.\n   */\n  baseIRI?: string;\n}\n\n/**\n * The RDF parse input, which contains the input stream in the given media type.\n * One of the fields MUST be truthy.\n */\nexport type IActionRdfParse = IActionParse<IActionRdfParseMetadata>;\n\nexport interface IActorRdfParseOutputMetadata {\n  /**\n   * An optional field indicating if the given quad stream originates from a triple-based serialization,\n   * in which everything is serialized in the default graph.\n   * If falsy, the quad stream contain actual quads, otherwise they should be interpreted as triples.\n   */\n  triples?: boolean;\n}\n\nexport type IActorRdfParseOutput = IActorParseOutput<RDF.Stream, IActorRdfParseOutputMetadata>;\n\nexport type IActorRdfParseArgs = IActorArgsMediaTyped<IActionRdfParse, IActorTest, IActorRdfParseOutput>;\n\nexport type MediatorRdfParseHandle = Mediate<\nIActionRdfParseHandle, IActorOutputRdfParseHandle, IActorTestRdfParseHandle>;\n\nexport type MediatorRdfParseMediaTypes = Mediate<\nIActionRdfParseMediaTypes, IActorOutputRdfParseMediaTypes, IActorTestRdfParseMediaTypes>;\n\nexport type MediatorRdfParseMediaTypeFormats = Mediate<\nIActionRdfParseMediaTypeFormats, IActorOutputRdfParseMediaTypeFormats, IActorTestRdfParseMediaTypeFormats>;\n"]}