{"version":3,"file":"ActorRdfParseHtml.js","sourceRoot":"","sources":["ActorRdfParseHtml.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionRdfParse,\n  IActorRdfParseFixedMediaTypesArgs,\n  IActorRdfParseOutput } from '@comunica/bus-rdf-parse';\nimport {\n  ActorRdfParseFixedMediaTypes,\n} from '@comunica/bus-rdf-parse';\nimport type {\n  IActionRdfParseHtml,\n  IActorRdfParseHtmlOutput,\n  IHtmlParseListener,\n} from '@comunica/bus-rdf-parse-html';\nimport type { Actor, Bus, IActorTest } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Parser } from 'htmlparser2';\nimport { Readable } from 'readable-stream';\n\n/**\n * A comunica HTML RDF Parse Actor.\n * It creates an HTML parser, and delegates its events via the bus-rdf-parse-html bus to other HTML parsing actors.\n */\nexport class ActorRdfParseHtml extends ActorRdfParseFixedMediaTypes {\n  private readonly busRdfParseHtml: Bus<Actor<IActionRdfParseHtml, IActorTest,\n  IActorRdfParseHtmlOutput>, IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput>;\n\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"text/html\": 1.0,\n   *       \"application/xhtml+xml\": 0.9\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"text/html\": \"http://www.w3.org/ns/formats/HTML\",\n   *       \"application/xhtml+xml\": \"http://www.w3.org/ns/formats/HTML\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfParseHtmlArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfParse, mediaType: string, context: IActionContext):\n  Promise<IActorRdfParseOutput> {\n    const data = new Readable({ objectMode: true });\n    data._read = async() => {\n      // Only initialize once\n      data._read = () => {\n        // Do nothing\n      };\n\n      // Create callbacks action\n      let endBarrier = 1;\n      function emit(quad: RDF.Quad): void {\n        data.emit('data', quad);\n      }\n      function error(subError: unknown): void {\n        data.emit('error', subError);\n      }\n      function end(): void {\n        if (--endBarrier === 0) {\n          data.push(null);\n        }\n      }\n      const htmlAction: IActionRdfParseHtml = {\n        baseIRI: action.metadata?.baseIRI ?? '',\n        context,\n        emit,\n        end,\n        error,\n        headers: action.headers,\n      };\n\n      // Register html parse listeners\n      Promise.all(this.busRdfParseHtml.publish(htmlAction))\n        .then(async outputs => {\n          endBarrier += outputs.length;\n\n          const htmlParseListeners: IHtmlParseListener[] = [];\n          for (const output of outputs) {\n            const { htmlParseListener } = await output.actor.run(htmlAction);\n            htmlParseListeners.push(htmlParseListener);\n          }\n\n          // Create parser\n          const parser = new Parser({\n            onclosetag() {\n              try {\n                for (const htmlParseListener of htmlParseListeners) {\n                  htmlParseListener.onTagClose();\n                }\n              } catch (error_: unknown) {\n                error(error_);\n              }\n            },\n            onend() {\n              try {\n                for (const htmlParseListener of htmlParseListeners) {\n                  htmlParseListener.onEnd();\n                }\n              } catch (error_: unknown) {\n                error(error_);\n              }\n              end();\n            },\n            onopentag(name: string, attributes: Record<string, string>) {\n              try {\n                for (const htmlParseListener of htmlParseListeners) {\n                  htmlParseListener.onTagOpen(name, attributes);\n                }\n              } catch (error_: unknown) {\n                error(error_);\n              }\n            },\n            ontext(text: string) {\n              try {\n                for (const htmlParseListener of htmlParseListeners) {\n                  htmlParseListener.onText(text);\n                }\n              } catch (error_: unknown) {\n                error(error_);\n              }\n            },\n          }, {\n            decodeEntities: true,\n            recognizeSelfClosing: true,\n            xmlMode: false,\n          });\n\n          // Push stream to parser\n          action.data\n            .on('error', error)\n            .on('data', chunk => parser.write(chunk.toString()))\n            .on('end', () => parser.end());\n        }).catch(error);\n    };\n\n    return { data };\n  }\n}\n\nexport interface IActorRdfParseHtmlArgs extends IActorRdfParseFixedMediaTypesArgs {\n  /* eslint-disable max-len */\n  /**\n   * The RDF Parse HTML bus for fetching HTML listeners\n   * @default {<npmd:@comunica/bus-rdf-parse-html/^2.0.0/components/ActorRdfParseHtml.jsonld#ActorRdfParseHtml_default_bus>}\n   */\n  busRdfParseHtml: Bus<Actor<IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput>,\n  IActionRdfParseHtml, IActorTest, IActorRdfParseHtmlOutput>;\n  /* eslint-enable max-len */\n}\n"]}