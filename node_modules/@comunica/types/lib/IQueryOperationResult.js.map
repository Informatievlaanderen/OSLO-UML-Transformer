{"version":3,"file":"IQueryOperationResult.js","sourceRoot":"","sources":["IQueryOperationResult.ts"],"names":[],"mappings":"","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport type { BindingsStream } from './Bindings';\nimport type { IActionContext } from './IActionContext';\nimport type { IMetadata, MetadataQuads, MetadataBindings } from './IMetadata';\n\nexport interface IQueryOperationResultBase {\n  /**\n   * The type of output.\n   */\n  type: string;\n  /**\n   * The resulting action context.\n   */\n  context?: IActionContext;\n}\n\n/**\n * Super interface for query operation results that represent some for of stream.\n * @see IQueryableResultBindings, IQueryableResultQuads\n */\nexport interface IQueryOperationResultStream<\n  M extends IMetadata<OrderItemsType>,\n  OrderItemsType extends RDF.Variable | RDF.QuadTermName\n> extends IQueryOperationResultBase {\n  /**\n   * Callback that returns a promise that resolves to the metadata about the stream.\n   *\n   * This can contain things like the estimated number of total stream elements,\n   * or the order in which the bindings appear.\n   *\n   * This callback can be invoked multiple times.\n   * Each invocation can return a different metadata object,\n   * if the previous one would have become invalidated (see `metadata.state`).\n   * The actors that return this metadata will make sure that multiple calls properly cache this promise,\n   * and that the cached object is properly invalidated if needed.\n   * Metadata will not be collected until this callback is invoked.\n   *\n   * This callback should resolve quickly, so it is safe to call and immediately `await` it.\n   */\n  metadata: () => Promise<M>;\n}\n\n/**\n * Query operation output for a bindings stream.\n * For example: SPARQL SELECT results\n */\nexport interface IQueryOperationResultBindings extends IQueryOperationResultStream<MetadataBindings, RDF.Variable> {\n  /**\n   * The type of output.\n   */\n  type: 'bindings';\n  /**\n   * The stream of bindings resulting from the given operation.\n   */\n  bindingsStream: BindingsStream;\n}\n\n/**\n * Query operation output for quads.\n * For example: SPARQL CONSTRUCT results\n */\nexport interface IQueryOperationResultQuads extends IQueryOperationResultStream<MetadataQuads, RDF.QuadTermName> {\n  /**\n   * The type of output.\n   */\n  type: 'quads';\n  /**\n   * The stream of quads.\n   */\n  quadStream: RDF.Stream & AsyncIterator<RDF.Quad> & RDF.ResultStream<RDF.Quad>;\n}\n\n/**\n * Query operation output for boolean results.\n * For example: SPARQL ASK results\n */\nexport interface IQueryOperationResultBoolean extends IQueryOperationResultBase {\n  /**\n   * The type of output.\n   */\n  type: 'boolean';\n  /**\n   * An async function resolving to the boolean output of the operation.\n   */\n  execute: () => Promise<boolean>;\n}\n\n/**\n * Query operation output for boolean results.\n * For example: SPARQL UPDATE results\n */\nexport interface IQueryOperationResultVoid extends IQueryOperationResultBase {\n  /**\n   * The type of output.\n   */\n  type: 'void';\n  /**\n   * An async function resolving when the update has finished.\n   */\n  execute: () => Promise<void>;\n}\n\n/**\n * Query operation output.\n * @see IQueryableResultBindings, IQueryableResultQuads, IQueryableResultBoolean, IQueryableResultVoid\n */\nexport type IQueryOperationResult =\n  IQueryOperationResultBindings |\n  IQueryOperationResultQuads |\n  IQueryOperationResultBoolean |\n  IQueryOperationResultVoid;\n\n/**\n * Enhanced query operation output for a bindings stream.\n * For example: SPARQL SELECT results\n */\nexport interface IQueryBindingsEnhanced extends QueryBindings {\n  // Override with more specific return type\n  execute: (opts?: RDF.QueryExecuteOptions<RDF.Variable>) => Promise<BindingsStream>;\n}\n\n/**\n * Enhanced query operation output for quads.\n * For example: SPARQL CONSTRUCT results\n */\nexport interface IQueryQuadsEnhanced extends QueryQuads {\n  // Override with more specific return type\n  execute: (opts?: RDF.QueryExecuteOptions<RDF.QuadTermName>)\n  => Promise<AsyncIterator<RDF.Quad> & RDF.ResultStream<RDF.Quad>>;\n}\n\nexport type QueryBindings = RDF.QueryBindings<RDF.AllMetadataSupport>;\nexport type QueryQuads = RDF.QueryQuads<RDF.AllMetadataSupport>;\n\n/**\n * Enhanced query operation output.\n * @see IQueryableResultBindingsEnhanced, IQueryableResultQuadsEnhanced, IQueryableResultBoolean, IQueryableResultVoid\n */\nexport type QueryEnhanced =\n  IQueryBindingsEnhanced |\n  IQueryQuadsEnhanced |\n  RDF.QueryBoolean |\n  RDF.QueryVoid;\n\n/**\n * Different manners in which a query can be explained.\n */\nexport type QueryExplainMode = 'parsed' | 'logical' | 'physical';\n\n/**\n * An interface marking an explained query.\n * WARNING: this API is experimental, and might be changed inbetween major versions.\n */\nexport interface IQueryExplained {\n  explain: true;\n  /**\n   * The mode of explanation\n   */\n  type: QueryExplainMode;\n  /**\n   * The raw explanation data\n   */\n  data: any;\n}\n"]}