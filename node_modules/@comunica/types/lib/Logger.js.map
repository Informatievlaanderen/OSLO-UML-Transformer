{"version":3,"file":"Logger.js","sourceRoot":"","sources":["Logger.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,MAAsB,MAAM;IAe1B;;;;OAIG;IACI,MAAM,CAAC,eAAe,CAAC,KAAa;QACzC,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;AAtBH,wBA8BC;AA7BC;;;GAGG;AAEoB,aAAM,GAA2B;IACtD,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;CACT,CAAC","sourcesContent":["/**\n * A logger accepts messages from different levels\n * and emits them in a certain way.\n */\nexport abstract class Logger {\n  /**\n   * All available logging levels.\n   * @type {{trace: number; debug: number; info: number; warn: number; error: number; fatal: number}}\n   */\n\n  public static readonly LEVELS: Record<string, number> = {\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4,\n    fatal: 5,\n  };\n\n  /**\n   * Convert a string-based logging level to a numerical logging level.\n   * @param level A string-based logging level\n   * @return The numerical logging level, or undefined.\n   */\n  public static getLevelOrdinal(level: string): number {\n    return Logger.LEVELS[level];\n  }\n\n  public abstract trace(message: string, data?: any): void;\n  public abstract debug(message: string, data?: any): void;\n  public abstract info(message: string, data?: any): void;\n  public abstract warn(message: string, data?: any): void;\n  public abstract error(message: string, data?: any): void;\n  public abstract fatal(message: string, data?: any): void;\n}\n"]}