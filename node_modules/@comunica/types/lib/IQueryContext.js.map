{"version":3,"file":"IQueryContext.js","sourceRoot":"","sources":["IQueryContext.ts"],"names":[],"mappings":"","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IDataDestination } from './IDataDestination';\nimport type { IDataSource } from './IDataSource';\nimport type { IProxyHandler } from './IProxyHandler';\nimport type { SourceType } from './IQueryEngine';\nimport type { QueryExplainMode } from './IQueryOperationResult';\nimport type { Logger } from './Logger';\n\n/**\n * Query context when a string-based query was passed.\n */\nexport type QueryStringContext = RDF.QueryStringContext & RDF.QuerySourceContext<SourceType> & IQueryContextCommon;\n/**\n * Query context when an algebra-based query was passed.\n */\nexport type QueryAlgebraContext = RDF.QueryAlgebraContext & RDF.QuerySourceContext<SourceType> & IQueryContextCommon;\n\nexport type FunctionArgumentsCache = Record<string, { func?: any; cache?: FunctionArgumentsCache }>;\n\n/**\n * Common query context interface\n */\nexport interface IQueryContextCommon {\n  // Types of these entries should be aligned with contextKeyShortcuts in ActorInitQueryBase\n  // and Keys in @comunica/context-entries\n\n  source?: IDataSource;\n  // Inherited from RDF.QueryStringContext: sources\n  destination?: IDataDestination;\n  initialBindings?: RDF.Bindings;\n  // Inherited from RDF.QueryStringContext: queryFormat?: string;\n  // Inherited from RDF.QueryStringContext: baseIRI?: string;\n  log?: Logger;\n  datetime?: Date;\n  // Inherited from RDF.QueryStringContext: queryTimestamp?: Date;\n  httpProxyHandler?: IProxyHandler;\n  lenient?: boolean;\n  httpIncludeCredentials?: boolean;\n  httpAuth?: string;\n  httpTimeout?: number;\n  httpBodyTimeout?: boolean;\n  httpRetryCount?: number;\n  httpRetryDelay?: number;\n  httpRetryOnServerError?: boolean;\n  fetch?: typeof fetch;\n  readOnly?: boolean;\n  extensionFunctionCreator?: (functionNamedNode: RDF.NamedNode)\n  => ((args: RDF.Term[]) => Promise<RDF.Term>) | undefined;\n  functionArgumentsCache?: FunctionArgumentsCache;\n  extensionFunctions?: Record<string, (args: RDF.Term[]) => Promise<RDF.Term>>;\n  explain?: QueryExplainMode;\n  recoverBrokenLinks?: boolean;\n}\n"]}