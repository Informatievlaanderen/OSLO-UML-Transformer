{"version":3,"file":"FetchInitPreprocessor-browser.js","sourceRoot":"","sources":["FetchInitPreprocessor-browser.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,yCAAyC;;;AAEzC,iDAA+C;AAG/C;;GAEG;AACH,MAAa,qBAAqB;IACzB,KAAK,CAAC,MAAM,CAAC,IAAiB;QACnC,2EAA2E;QAC3E,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;gBAC7B,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;aAC9B;YACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SACxB;QAED,gHAAgH;QAChH,IAAI,IAAI,EAAE,OAAO,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;YAC7C,IAAI,CAAC,OAAO,GAAG,oBAAS,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACtD;QAED,6EAA6E;QAC7E,+DAA+D;QAC/D,uDAAuD;QACvD,qDAAqD;QACrD,oEAAoE;QACpE,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,WAAW,IAAI,IAAI,CAAC,IAAI,EAAE;YAC1E,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,EAAE,CAAC;YAClB,iDAAiD;YACjD,OAAO,IAAI,EAAE;gBACX,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC5C,IAAI,IAAI,EAAE;oBACR,MAAM;iBACP;gBACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpB;YACD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC7B;QAED,0GAA0G;QAC1G,OAAO,EAAE,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,qBAAqB;QAChC,OAAO,IAAI,eAAe,EAAE,CAAC;IAC/B,CAAC;CACF;AA1CD,sDA0CC","sourcesContent":["/* eslint-disable unicorn/filename-case */\n/* eslint-enable unicorn/filename-case */\n\nimport { ActorHttp } from '@comunica/bus-http';\nimport type { IFetchInitPreprocessor } from './IFetchInitPreprocessor';\n\n/**\n * Overrides things for fetch requests in browsers\n */\nexport class FetchInitPreprocessor implements IFetchInitPreprocessor {\n  public async handle(init: RequestInit): Promise<RequestInit> {\n    // Remove overridden user-agent header within browsers to avoid CORS issues\n    if (init.headers) {\n      const headers = new Headers(init.headers);\n      if (headers.has('user-agent')) {\n        headers.delete('user-agent');\n      }\n      init.headers = headers;\n    }\n\n    // TODO: remove this workaround once this has a fix: https://github.com/inrupt/solid-client-authn-js/issues/1708\n    if (init?.headers && 'append' in init.headers) {\n      init.headers = ActorHttp.headersToHash(init.headers);\n    }\n\n    // Browsers don't yet support passing ReadableStream as body to requests, see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=688906\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n    // As such, we convert those bodies to a plain string\n    // TODO: remove this once browser support ReadableStream in requests\n    if (init.body && typeof init.body !== 'string' && 'getReader' in init.body) {\n      const reader = init.body.getReader();\n      const chunks = [];\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          break;\n        }\n        chunks.push(value);\n      }\n      init.body = chunks.join('');\n    }\n\n    // Only enable keepalive functionality if we are not sending a body (some browsers seem to trip over this)\n    return { keepalive: !init.body, ...init };\n  }\n\n  public async createAbortController(): Promise<AbortController> {\n    return new AbortController();\n  }\n}\n"]}