{"version":3,"file":"FetchInitPreprocessor.js","sourceRoot":"","sources":["FetchInitPreprocessor.ts"],"names":[],"mappings":";;;AAAA,6CAA6C;AAC7C,+BAA0C;AAC1C,iCAA4C;AAC5C,iDAA+C;AAG/C;;GAEG;AACH,MAAa,qBAAqB;IAGhC,YAAmB,YAAiB;QAClC,MAAM,SAAS,GAAG,IAAI,YAAS,CAAC,YAAY,CAAC,CAAC;QAC9C,MAAM,UAAU,GAAG,IAAI,aAAU,CAAC,YAAY,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,GAAG,CAAC,UAAe,EAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;IACxG,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,IAAiB;QACnC,qFAAqF;QACrF,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,WAAW,IAAU,IAAI,CAAC,IAAI,EAAE;YAChF,IAAI,CAAC,IAAI,GAAS,oBAAS,CAAC,cAAc,CAAO,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5D,+EAA+E;YAC/E,gCAAgC;YAChC,mCAAmC;YACnC,UAAU,GAAG,IAAI,CAAC;SACnB;QAED,OAAa;YACX,GAAG,IAAI;YACP,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,SAAS,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;YACzC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;SACxC,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,qBAAqB;QAChC,kEAAkE;QAClE,0BAA0B;QAC1B,MAAM,eAAe,GAAG,UAAU,CAAC,eAAe,IAAI,2CAAa,kBAAkB,EAAC,CAAC;QACvF,OAAO,IAAI,eAAe,EAAE,CAAC;IAC/B,CAAC;CACF;AAlCD,sDAkCC;AACD,4CAA4C","sourcesContent":["/* eslint-disable import/no-nodejs-modules */\nimport { Agent as HttpAgent } from 'http';\nimport { Agent as HttpsAgent } from 'https';\nimport { ActorHttp } from '@comunica/bus-http';\nimport type { IFetchInitPreprocessor } from './IFetchInitPreprocessor';\n\n/**\n * Overrides the HTTP agent to perform better in Node.js.\n */\nexport class FetchInitPreprocessor implements IFetchInitPreprocessor {\n  private readonly agent: (url: URL) => HttpAgent;\n\n  public constructor(agentOptions: any) {\n    const httpAgent = new HttpAgent(agentOptions);\n    const httpsAgent = new HttpsAgent(agentOptions);\n    this.agent = (_parsedURL: URL): HttpAgent => _parsedURL.protocol === 'http:' ? httpAgent : httpsAgent;\n  }\n\n  public async handle(init: RequestInit): Promise<RequestInit> {\n    // Convert body Web stream to Node stream, as node-fetch does not support Web streams\n    let halfDuplex = false;\n    if (init.body && typeof init.body !== 'string' && 'getReader' in <any> init.body) {\n      init.body = <any> ActorHttp.toNodeReadable(<any> init.body);\n      // The Fetch API requires specific options to be set when sending body streams:\n      // - 'keepalive' can not be true\n      // - 'duplex' must be set to 'half'\n      halfDuplex = true;\n    }\n\n    return <any> {\n      ...init,\n      agent: this.agent,\n      keepalive: !halfDuplex ? true : undefined,\n      duplex: halfDuplex ? 'half' : undefined,\n    };\n  }\n\n  public async createAbortController(): Promise<AbortController> {\n    // Fallback to abort-controller for Node 14 backward compatibility\n    /* istanbul ignore next */\n    const AbortController = globalThis.AbortController || await import('abort-controller');\n    return new AbortController();\n  }\n}\n/* eslint-enable import/no-nodejs-modules */\n"]}