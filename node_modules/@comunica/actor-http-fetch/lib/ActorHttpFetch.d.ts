import type { IActionHttp, IActorHttpOutput, IActorHttpArgs } from '@comunica/bus-http';
import { ActorHttp } from '@comunica/bus-http';
import type { IMediatorTypeTime } from '@comunica/mediatortype-time';
import 'cross-fetch/polyfill';
/**
 * A node-fetch actor that listens on the 'init' bus.
 *
 * It will call `fetch` with either action.input or action.url.
 */
export declare class ActorHttpFetch extends ActorHttp {
    private readonly userAgent;
    private readonly fetchInitPreprocessor;
    constructor(args: IActorHttpFetchArgs);
    static createUserAgent(): string;
    test(action: IActionHttp): Promise<IMediatorTypeTime>;
    /**
     * Perform a fetch request, taking care of retries
     * @param fetchFn
     * @param requestInput Url or RequestInfo to pass to fetchFn
     * @param requestInit RequestInit to pass to fetch function
     * @param retryCount Maximum retries after which to abort
     * @param retryDelay Time in milliseconds to wait between retries
     * @returns a fetch `Response` object
     */
    private static getResponse;
    run(action: IActionHttp): Promise<IActorHttpOutput>;
}
export interface IActorHttpFetchArgs extends IActorHttpArgs {
    /**
     * The agent options for the HTTP agent
     * @range {json}
     * @default {{ "keepAlive": true, "maxSockets": 5 }}
     */
    agentOptions?: Record<string, any>;
}
