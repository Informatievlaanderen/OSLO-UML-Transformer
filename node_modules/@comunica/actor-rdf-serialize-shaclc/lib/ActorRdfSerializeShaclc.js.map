{"version":3,"file":"ActorRdfSerializeShaclc.js","sourceRoot":"","sources":["ActorRdfSerializeShaclc.ts"],"names":[],"mappings":";;;AAGA,mEAEqC;AAErC,qDAA6C;AAC7C,qDAA2C;AAC3C,+CAAqC;AAErC;;GAEG;AACH,MAAa,uBAAwB,SAAQ,oDAAgC;IAC3E;;;;;;;;;;OAUG;IACH,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAA2B,EAAE,SAAiB,EAAE,OAAuB;QAE5F,MAAM,IAAI,GAAG,IAAI,0BAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;YAChB,aAAa;QACf,CAAC,CAAC;QAEF,IAAI;YACF,MAAM,QAAQ,GAA2B,EAAE,CAAC;YAC5C,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;gBAC7C,QAAQ,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;YACzB,CAAC,CAAC,CAAC;YAEH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,oBAAK,EAC1B,MAAM,IAAA,yBAAc,EAAC,MAAM,CAAC,UAAU,CAAC,EACvC,EAAE,aAAa,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,KAAK,iBAAiB,EAAE,QAAQ,EAAE,CACnF,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjB;QAAC,OAAO,KAAc,EAAE;YACvB,iCAAiC;YACjC,IAAI,CAAC,KAAK,GAAG,GAAG,EAAE;gBAChB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC5B,CAAC,CAAC;SACH;QAED,OAAO;YACL,IAAI;YACJ,OAAO,EAAE,IAAI;SACd,CAAC;IACJ,CAAC;CACF;AA/CD,0DA+CC","sourcesContent":["import type { IActionRdfSerialize,\n  IActorRdfSerializeFixedMediaTypesArgs,\n  IActorRdfSerializeOutput } from '@comunica/bus-rdf-serialize';\nimport {\n  ActorRdfSerializeFixedMediaTypes,\n} from '@comunica/bus-rdf-serialize';\nimport type { IActionContext } from '@comunica/types';\nimport arrayifyStream from 'arrayify-stream';\nimport { Readable } from 'readable-stream';\nimport { write } from 'shaclc-write';\n\n/**\n * A comunica SHACL Compact Syntax RDF Serialize Actor.\n */\nexport class ActorRdfSerializeShaclc extends ActorRdfSerializeFixedMediaTypes {\n  /**\n   * @param args -\n   *   \\ @defaultNested {{\n   *       \"text/shaclc\": 1.0,\n   *       \"text/shaclc-ext\": 0.5\n   *     }} mediaTypePriorities\n   *   \\ @defaultNested {{\n   *       \"text/shaclc\": \"http://www.w3.org/ns/formats/Shaclc\",\n   *       \"text/shaclc-ext\": \"http://www.w3.org/ns/formats/ShaclcExtended\"\n   *     }} mediaTypeFormats\n   */\n  public constructor(args: IActorRdfSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n\n  public async runHandle(action: IActionRdfSerialize, mediaType: string, context: IActionContext):\n  Promise<IActorRdfSerializeOutput> {\n    const data = new Readable();\n    data._read = () => {\n      // Do nothing\n    };\n\n    try {\n      const prefixes: Record<string, string> = {};\n      action.quadStream.on('prefix', (prefix, iri) => {\n        prefixes[prefix] = iri;\n      });\n\n      const { text } = await write(\n        await arrayifyStream(action.quadStream),\n        { errorOnUnused: true, extendedSyntax: mediaType === 'text/shaclc-ext', prefixes },\n      );\n      data.push(text);\n      data.push(null);\n    } catch (error: unknown) {\n      // Push the error into the stream\n      data._read = () => {\n        data.emit('error', error);\n      };\n    }\n\n    return {\n      data,\n      triples: true,\n    };\n  }\n}\n"]}