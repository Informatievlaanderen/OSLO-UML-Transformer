{"version":3,"file":"ActorHttpProxy.js","sourceRoot":"","sources":["ActorHttpProxy.ts"],"names":[],"mappings":";;;AACA,iDAA+C;AAC/C,+DAA0D;AAI1D;;GAEG;AACH,MAAa,cAAe,SAAQ,oBAAS;IAG3C,YAAmB,IAAyB;QAC1C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,MAAM,YAAY,GAA8B,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,gBAAgB,CAAC,CAAC;QACnG,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,iDAAiD,CAAC,CAAC;SACtF;QACD,IAAI,CAAC,MAAM,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,qDAAqD,CAAC,CAAC;SAC1F;QACD,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,iBAAiB,EAAE,CAAC;IAC5C,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,MAAM,YAAY,GAAG,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;QACxF,MAAM,YAAY,GAAkB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,gBAAgB,CAAE,CAAC;QAExF,0CAA0C;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC7C,GAAG,MAAM,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YACtC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,+BAAa,CAAC,gBAAgB,CAAC;SAC/D,CAAC,CAAC;QAEH,0BAA0B;QAC1B,mEAAmE;QACnE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE;YACnC,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,IAAI;YAChB,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,YAAY;SAC7D,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AArCD,wCAqCC","sourcesContent":["import type { IActionHttp, IActorHttpOutput, MediatorHttp, IActorHttpArgs } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport { KeysHttpProxy } from '@comunica/context-entries';\nimport type { IMediatorTypeTime } from '@comunica/mediatortype-time';\nimport type { IProxyHandler } from '@comunica/types';\n\n/**\n * A comunica Proxy Http Actor.\n */\nexport class ActorHttpProxy extends ActorHttp {\n  public readonly mediatorHttp: MediatorHttp;\n\n  public constructor(args: IActorHttpProxyArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionHttp): Promise<IMediatorTypeTime> {\n    const proxyHandler: IProxyHandler | undefined = action.context.get(KeysHttpProxy.httpProxyHandler);\n    if (!proxyHandler) {\n      throw new Error(`Actor ${this.name} could not find a proxy handler in the context.`);\n    }\n    if (!await proxyHandler.getProxy(action)) {\n      throw new Error(`Actor ${this.name} could not determine a proxy for the given request.`);\n    }\n    return { time: Number.POSITIVE_INFINITY };\n  }\n\n  public async run(action: IActionHttp): Promise<IActorHttpOutput> {\n    const requestedUrl = typeof action.input === 'string' ? action.input : action.input.url;\n    const proxyHandler: IProxyHandler = action.context.get(KeysHttpProxy.httpProxyHandler)!;\n\n    // Send a request for the modified request\n    const output = await this.mediatorHttp.mediate({\n      ...await proxyHandler.getProxy(action),\n      context: action.context.delete(KeysHttpProxy.httpProxyHandler),\n    });\n\n    // Modify the response URL\n    // use defineProperty to allow modification of unmodifiable objects\n    Object.defineProperty(output, 'url', {\n      configurable: true,\n      enumerable: true,\n      get: () => output.headers.get('x-final-url') ?? requestedUrl,\n    });\n    return output;\n  }\n}\n\nexport interface IActorHttpProxyArgs extends IActorHttpArgs {\n  /**\n   * The HTTP mediator\n   */\n  mediatorHttp: MediatorHttp;\n}\n"]}