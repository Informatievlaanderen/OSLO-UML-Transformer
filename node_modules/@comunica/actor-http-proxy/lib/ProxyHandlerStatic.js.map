{"version":3,"file":"ProxyHandlerStatic.js","sourceRoot":"","sources":["ProxyHandlerStatic.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,kBAAkB;IAG7B,YAAmB,SAAiB;QAClC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,OAAiB;QACrC,OAAO;YACL,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC;SACvC,CAAC;IACJ,CAAC;IAEM,WAAW,CAAC,KAAkB;QACnC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,OAAO,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SAC/B;QACD,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC;CACF;AApBD,gDAoBC","sourcesContent":["import type { IProxyHandler, IRequest } from '@comunica/types';\n\n/**\n * A proxy handler that prefixes all URLs with a given string.\n */\nexport class ProxyHandlerStatic implements IProxyHandler {\n  private readonly prefixUrl: string;\n\n  public constructor(prefixUrl: string) {\n    this.prefixUrl = prefixUrl;\n  }\n\n  public async getProxy(request: IRequest): Promise<IRequest> {\n    return {\n      init: request.init,\n      input: this.modifyInput(request.input),\n    };\n  }\n\n  public modifyInput(input: RequestInfo): RequestInfo {\n    if (typeof input === 'string') {\n      return this.prefixUrl + input;\n    }\n    return new Request(this.prefixUrl + input.url, input);\n  }\n}\n"]}