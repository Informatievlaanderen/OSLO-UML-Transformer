{"version":3,"file":"ActorHttp.js","sourceRoot":"","sources":["ActorHttp.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AACvC,sFAA+E;AAE/E,0BAA0B;AAC1B,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE;IAC9B,UAAU,CAAC,cAAc,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC,cAAc,CAAC;CAC5E;AAED,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACtC,MAAM,mBAAmB,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC;AAEnE;;;;;;;;;;;GAWG;AACH,MAAsB,SAAU,SAAQ,YAAgD;IACtF;;OAEG;IACH,YAAmB,IAAoB;QACrC,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,cAAc,CAAC,IAA2B;QACtD,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,IAAI,CAAC,CAAC;YACR,IAAI,CAAC,CAAC;YACN,IAAI,qDAAuB,CAAC,IAAI,CAAC,CAAC;IACpE,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,mBAAmB,CAAC,IAAkC;QAClE,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,aAAa,CAAC,OAAgB;QAC1C,MAAM,IAAI,GAA2B,EAAE,CAAC;QACxC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAxCD,8BAwCC","sourcesContent":["import type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport { ReadableWebToNodeStream } from '@smessie/readable-web-to-node-stream';\n\n/* istanbul ignore next */\nif (!globalThis.ReadableStream) {\n  globalThis.ReadableStream = require('web-streams-ponyfill').ReadableStream;\n}\n\nconst isStream = require('is-stream');\nconst toWebReadableStream = require('readable-stream-node-to-web');\n\n/**\n * A base actor for listening to HTTP events.\n *\n * Actor types:\n * * Input:  IActionHttp:      The HTTP request.\n * * Test:   IActorHttpTest:   An estimate for the response time.\n * * Output: IActorHttpOutput: The HTTP response.\n *\n * @see IActionHttp\n * @see IActorHttpTest\n * @see IActorHttpOutput\n */\nexport abstract class ActorHttp extends Actor<IActionHttp, IActorTest, IActorHttpOutput> {\n  /**\n   * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   */\n  public constructor(args: IActorHttpArgs) {\n    super(args);\n  }\n\n  /**\n   * Converts WhatWG streams to Node streams if required.\n   * Returns the input in case the stream already is a Node stream.\n   * @param {ReadableStream} body\n   * @returns {NodeJS.ReadableStream}\n   */\n  public static toNodeReadable(body: ReadableStream | null): NodeJS.ReadableStream {\n    return isStream(body) || body === null ?\n      <NodeJS.ReadableStream> <any> body :\n      <NodeJS.ReadableStream> <any> new ReadableWebToNodeStream(body);\n  }\n\n  /**\n   * Converts Node streams to WhatWG streams.\n   * @param {NodeJS.ReadableStream} body\n   * @returns {ReadableStream}\n   */\n  public static toWebReadableStream(body: NodeJS.ReadableStream | null): ReadableStream {\n    return toWebReadableStream(body);\n  }\n\n  /**\n   * Convert the given headers object into a raw hash.\n   * @param headers A headers object.\n   */\n  public static headersToHash(headers: Headers): Record<string, string> {\n    const hash: Record<string, string> = {};\n    headers.forEach((value, key) => {\n      hash[key] = value;\n    });\n    return hash;\n  }\n}\n\n/**\n * The HTTP input, which contains the HTTP request.\n */\nexport interface IActionHttp extends IAction {\n  input: RequestInfo;\n  init?: RequestInit;\n}\n\n/**\n * The HTTP output, which contains the HTTP response.\n */\nexport interface IActorHttpOutput extends IActorOutput, Response {\n\n}\n\nexport type IActorHttpArgs = IActorArgs<IActionHttp, IActorTest, IActorHttpOutput>;\n\nexport type MediatorHttp = Mediate<IActionHttp, IActorHttpOutput>;\n"]}