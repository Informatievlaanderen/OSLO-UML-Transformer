{"version":3,"file":"FetchDocumentLoader.js","sourceRoot":"","sources":["FetchDocumentLoader.ts"],"names":[],"mappings":";;;AAAA,gCAA8B;AAG9B,6CAAqD;AACrD,uDAA0D;AAC1D,uEAAiD;AAEjD;;GAEG;AACH,MAAa,mBAAmB;IAI9B,YAAY,OAA+D;QACzE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,GAAW;QAC3B,MAAM,QAAQ,GAAa,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,OAAO,CAAC,EAAE,MAAM,EAAE,qBAAqB,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3H,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,OAAO,EAAE;YACnC,IAAI,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACrD,IAAI,SAAS,EAAE;gBACb,MAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAI,QAAQ,GAAG,CAAC,EAAE;oBAChB,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;iBAC3C;aACF;YACD,IAAI,SAAS,KAAK,qBAAqB,EAAE;gBACvC,qDAAqD;gBACrD,OAAO,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;aAChC;iBAAM;gBACL,sDAAsD;gBACtD,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;oBAChC,IAAI,YAAgC,CAAC;oBACrC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;wBACtC,IAAI,GAAG,KAAK,MAAM,EAAE;4BAClB,MAAM,UAAU,GAAG,IAAA,wBAAe,EAAC,KAAK,CAAC,CAAC;4BAC1C,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,qBAAqB,CAAC,EAAE;gCAChE,IAAI,IAAI,CAAC,GAAG,KAAK,WAAW,EAAE;oCAC5B,IAAI,YAAY,EAAE;wCAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,GAAG,GAAG,CAAC,CAAC;qCAC1E;oCACD,YAAY,GAAG,IAAA,kCAAO,EAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iCACvC;6BACF;yBACF;oBACH,CAAC,CAAC,CAAC;oBACH,IAAI,YAAY,EAAE;wBAChB,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBAChC;iBACF;gBAED,MAAM,IAAI,uBAAU,CAAC,kCAAkC,SAAS,EAAE,EAChE,wBAAW,CAAC,uBAAuB,CAAC,CAAC;aACxC;SACF;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,IAAI,gBAAgB,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;SAC3E;IACH,CAAC;CAEF;AAnDD,kDAmDC","sourcesContent":["import 'cross-fetch/polyfill';\nimport {IDocumentLoader} from \"./IDocumentLoader\";\nimport {IJsonLdContext} from \"./JsonLdContext\";\nimport {ERROR_CODES, ErrorCoded} from \"./ErrorCoded\";\nimport {parse as parseLinkHeader} from \"http-link-header\";\nimport {resolve} from \"relative-to-absolute-iri\";\n\n/**\n * Loads documents via the fetch API.\n */\nexport class FetchDocumentLoader implements IDocumentLoader {\n\n  private readonly fetcher?: (url: string, init: RequestInit) => Promise<Response>;\n\n  constructor(fetcher?: (url: string, init: RequestInit) => Promise<Response>) {\n    this.fetcher = fetcher;\n  }\n\n  public async load(url: string): Promise<IJsonLdContext> {\n    const response: Response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n    if (response.ok && response.headers) {\n      let mediaType = response.headers.get('Content-Type');\n      if (mediaType) {\n        const colonPos = mediaType.indexOf(';');\n        if (colonPos > 0) {\n          mediaType = mediaType.substr(0, colonPos);\n        }\n      }\n      if (mediaType === 'application/ld+json') {\n        // Return JSON-LD if proper content type was returned\n        return (await response.json());\n      } else {\n        // Check for alternate link for a non-JSON-LD response\n        if (response.headers.has('Link')) {\n          let alternateUrl: string | undefined;\n          response.headers.forEach((value, key) => {\n            if (key === 'link') {\n              const linkHeader = parseLinkHeader(value);\n              for (const link of linkHeader.get('type', 'application/ld+json')) {\n                if (link.rel === 'alternate') {\n                  if (alternateUrl) {\n                    throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                  }\n                  alternateUrl = resolve(link.uri, url);\n                }\n              }\n            }\n          });\n          if (alternateUrl) {\n            return this.load(alternateUrl);\n          }\n        }\n\n        throw new ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`,\n          ERROR_CODES.LOADING_DOCUMENT_FAILED);\n      }\n    } else {\n      throw new Error(response.statusText || `Status code: ${response.status}`);\n    }\n  }\n\n}\n"]}