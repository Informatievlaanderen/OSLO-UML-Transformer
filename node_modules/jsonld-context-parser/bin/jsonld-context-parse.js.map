{"version":3,"file":"jsonld-context-parse.js","sourceRoot":"","sources":["jsonld-context-parse.ts"],"names":[],"mappings":";;;AAEA,2BAAgC;AAChC,wDAAmD;AAEnD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAEnC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IACrB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;;;;;;CAMtB,CAAC,CAAC;IACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAED,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAErB,IAAI,KAAU,CAAC;AACf,IAAI,QAAQ,GAAY,KAAK,CAAC;AAC9B,IAAI,OAA2B,CAAC;AAChC,QAAQ,IAAI,EAAE;IACd,KAAK,KAAK;QACR,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAChB,QAAQ,GAAG,IAAI,CAAC;QAChB,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,MAAM;IACR,KAAK,MAAM;QACT,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,iBAAY,EAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAClD,OAAO,GAAG,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM;IACR,KAAK,KAAK;QACR,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,OAAO,GAAG,YAAY,CAAC;QACvB,MAAM;IACR;QACE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;QAC5E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChB,MAAM;CACP;AAED,IAAI,6BAAa,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;KACpD,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;IAChB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1E,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC,CAAC;KACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACb,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAClC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport {readFileSync} from \"fs\";\nimport {ContextParser} from \"../lib/ContextParser\";\n\nconst argv = process.argv.slice(2);\n\nif (argv.length !== 2) {\n  process.stderr.write(`jsonld-context-parse parses JSON-LD contexts\n\nUsage:\n  jsonld-context-parse url http://json-ld.org/contexts/person.jsonld\n  jsonld-context-parse file path/to/context.jsonld\n  jsonld-context-parse arg '{ \"xsd\": \"http://www.w3.org/2001/XMLSchema#\" }'\n`);\n  process.exit(1);\n}\n\nconst type = argv[0];\n\nlet input: any;\nlet external: boolean = false;\nlet baseIRI: string | undefined;\nswitch (type) {\ncase 'url':\n  input = argv[1];\n  external = true;\n  baseIRI = argv[1];\n  break;\ncase 'file':\n  input = JSON.parse(readFileSync(argv[1], 'utf8'));\n  baseIRI = 'file://' + argv[1];\n  break;\ncase 'arg':\n  input = JSON.parse(argv[1]);\n  baseIRI = 'urn:local:';\n  break;\ndefault:\n  process.stderr.write(`Unknown context type. Choose from url, file or arg.`);\n  process.exit(1);\n  break;\n}\n\nnew ContextParser().parse(input, { external, baseIRI })\n  .then((context) => {\n    process.stdout.write(JSON.stringify(context.getContextRaw(), null, '  '));\n    process.stdout.write('\\n');\n  })\n  .catch((err) => {\n    process.stderr.write(err.message);\n    process.stdout.write('\\n');\n    process.exit(1);\n  });\n"]}