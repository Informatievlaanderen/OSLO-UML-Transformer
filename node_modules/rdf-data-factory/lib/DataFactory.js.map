{"version":3,"file":"DataFactory.js","sourceRoot":"","sources":["DataFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { BlankNode } from './BlankNode';\nimport { DefaultGraph } from './DefaultGraph';\nimport { Literal } from './Literal';\nimport { NamedNode } from './NamedNode';\nimport { Quad } from './Quad';\nimport { Variable } from './Variable';\n\nlet dataFactoryCounter = 0;\n\n/**\n * A factory for instantiating RDF terms and quads.\n */\nexport class DataFactory<Q extends RDF.BaseQuad = RDF.Quad> implements RDF.DataFactory<Q> {\n  private readonly blankNodePrefix: string;\n  private blankNodeCounter = 0;\n\n  public constructor(options?: IDataFactoryOptions) {\n    options = options || {};\n    this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n  }\n\n  /**\n   * @param value The IRI for the named node.\n   * @return A new instance of NamedNode.\n   * @see NamedNode\n   */\n  public namedNode<Iri extends string = string>(value: Iri): NamedNode<Iri> {\n    return new NamedNode(value);\n  }\n\n  /**\n   * @param value The optional blank node identifier.\n   * @return A new instance of BlankNode.\n   *         If the `value` parameter is undefined a new identifier\n   *         for the blank node is generated for each call.\n   * @see BlankNode\n   */\n  public blankNode(value?: string): BlankNode {\n    return new BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n  }\n\n  /**\n   * @param value              The literal value.\n   * @param languageOrDatatype The optional language or datatype.\n   *                           If `languageOrDatatype` is a NamedNode,\n   *                           then it is used for the value of `NamedNode.datatype`.\n   *                           Otherwise `languageOrDatatype` is used for the value\n   *                           of `NamedNode.language`.\n   * @return A new instance of Literal.\n   * @see Literal\n   */\n  public literal(value: string, languageOrDatatype?: string | RDF.NamedNode): Literal {\n    return new Literal(value, languageOrDatatype);\n  }\n\n  /**\n   * This method is optional.\n   * @param value The variable name\n   * @return A new instance of Variable.\n   * @see Variable\n   */\n  public variable(value: string): Variable {\n    return new Variable(value);\n  }\n\n  /**\n   * @return An instance of DefaultGraph.\n   */\n  public defaultGraph(): DefaultGraph {\n    return DefaultGraph.INSTANCE;\n  }\n\n  /**\n   * @param subject   The quad subject term.\n   * @param predicate The quad predicate term.\n   * @param object    The quad object term.\n   * @param graph     The quad graph term.\n   * @return A new instance of Quad.\n   * @see Quad\n   */\n  public quad(\n    subject: Q['subject'],\n    predicate: Q['predicate'],\n    object: Q['object'],\n    graph?: Q['graph'],\n  ): Q & Quad {\n    return <Q> new Quad(subject, predicate, object, graph || this.defaultGraph());\n  }\n\n  /**\n   * Create a deep copy of the given term using this data factory.\n   * @param original An RDF term.\n   * @return A deep copy of the given term.\n   */\n  public fromTerm<T extends RDF.Term>(original: T):\n  (T extends RDF.NamedNode ? NamedNode\n    : (T extends RDF.BlankNode ? BlankNode\n      : (T extends RDF.Literal ? Literal\n        : (T extends RDF.Variable ? Variable\n          : (T extends RDF.DefaultGraph ? DefaultGraph\n            : (T extends Q ? Q : unknown)))))) {\n    // TODO: remove nasty any casts when this TS bug has been fixed:\n    //  https://github.com/microsoft/TypeScript/issues/26933\n    switch (original.termType) {\n      case 'NamedNode':\n        return <any> this.namedNode(original.value);\n      case 'BlankNode':\n        return <any> this.blankNode(original.value);\n      case 'Literal':\n        if ((<RDF.Literal> original).language) {\n          return <any> this.literal(original.value, (<RDF.Literal>original).language);\n        }\n        if (!(<RDF.Literal> original).datatype.equals(Literal.XSD_STRING)) {\n          return <any> this.literal(original.value, this.fromTerm((<RDF.Literal> original).datatype));\n        }\n        return <any> this.literal(original.value);\n      case 'Variable':\n        return <any> this.variable(original.value);\n      case 'DefaultGraph':\n        return <any> this.defaultGraph();\n      case 'Quad':\n        return <any> this.quad(\n          <Q['subject']> this.fromTerm((<Q> <unknown> original).subject),\n          <Q['predicate']> this.fromTerm((<Q> <unknown> original).predicate),\n          <Q['object']> this.fromTerm((<Q> <unknown> original).object),\n          <Q['graph']> this.fromTerm((<Q> <unknown> original).graph),\n        );\n    }\n  }\n\n  /**\n   * Create a deep copy of the given quad using this data factory.\n   * @param original An RDF quad.\n   * @return A deep copy of the given quad.\n   */\n  public fromQuad(original: Q): Q {\n    return <Q> this.fromTerm(original);\n  }\n\n  /**\n   * Reset the internal blank node counter.\n   */\n  public resetBlankNodeCounter(): void {\n    this.blankNodeCounter = 0;\n  }\n}\n\nexport interface IDataFactoryOptions {\n  blankNodePrefix?: string;\n}\n"]}