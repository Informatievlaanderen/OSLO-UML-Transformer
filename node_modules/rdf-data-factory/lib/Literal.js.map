{"version":3,"file":"Literal.js","sourceRoot":"","sources":["Literal.ts"],"names":[],"mappings":";;;AACA,2CAAwC;AAExC;;GAEG;AACH,MAAa,OAAO;IAYlB,YAAmB,KAAa,EAAE,kBAA2C;QAX7D,aAAQ,GAAG,SAAS,CAAC;QAYnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;YAC1C,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,mBAAmB,CAAC;SAC7C;aAAM,IAAI,kBAAkB,EAAE;YAC7B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC;SACpC;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC;SACpC;IACH,CAAC;IAEM,MAAM,CAAC,KAAuB;QACnC,OAAO,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK;YAC1E,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC7E,CAAC;;AA7BH,0BA8BC;AAxBwB,2BAAmB,GAC1C,IAAI,qBAAS,CAAC,uDAAuD,CAAC,CAAC;AAEhD,kBAAU,GACjC,IAAI,qBAAS,CAAC,yCAAyC,CAAC,CAAC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { NamedNode } from './NamedNode';\n\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nexport class Literal implements RDF.Literal {\n  public readonly termType = 'Literal';\n  public readonly value: string;\n  public readonly language: string;\n  public readonly datatype: RDF.NamedNode;\n\n  public static readonly RDF_LANGUAGE_STRING: RDF.NamedNode =\n  new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\n\n  public static readonly XSD_STRING: RDF.NamedNode =\n  new NamedNode('http://www.w3.org/2001/XMLSchema#string');\n\n  public constructor(value: string, languageOrDatatype?: string | RDF.NamedNode) {\n    this.value = value;\n    if (typeof languageOrDatatype === 'string') {\n      this.language = languageOrDatatype;\n      this.datatype = Literal.RDF_LANGUAGE_STRING;\n    } else if (languageOrDatatype) {\n      this.language = '';\n      this.datatype = languageOrDatatype;\n    } else {\n      this.language = '';\n      this.datatype = Literal.XSD_STRING;\n    }\n  }\n\n  public equals(other?: RDF.Term | null): boolean {\n    return !!other && other.termType === 'Literal' && other.value === this.value &&\n      other.language === this.language && this.datatype.equals(other.datatype);\n  }\n}\n"]}