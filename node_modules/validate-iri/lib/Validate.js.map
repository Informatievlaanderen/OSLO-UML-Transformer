{"version":3,"file":"Validate.js","sourceRoot":"","sources":["Validate.ts"],"names":[],"mappings":"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","sourcesContent":["function buildAbsoluteIriRfc3987Regex(): RegExp {\n  // The syntax is defined in https://www.rfc-editor.org/rfc/rfc3987#section-2.2\n  // Rules are defined in reversed order\n\n  const sub_delims_raw = `!$&'()*+,;=`;\n  const sub_delims = `[${sub_delims_raw}]`;\n\n  const pct_encoded = `%[a-fA-F0-9]{2}`;\n\n  const dec_octet = '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n\n  const ipv4address = `${dec_octet}\\\\.${dec_octet}\\\\.${dec_octet}\\\\.${dec_octet}`;\n\n  const h16 = `[a-fA-F0-9]{1,4}`;\n  const ls32 = `(${h16}:${h16}|${ipv4address})`;\n  const ipv6address = `((${h16}:){6}${ls32}|::(${h16}:){5}${ls32}|(${h16})?::(${h16}:){4}${ls32}|((${h16}:){0,1}${h16})?::(${h16}:){3}${ls32}|((${h16}:){0,2}${h16})?::(${h16}:){2}${ls32}|((${h16}:){0,3}${h16})?::${h16}:${ls32}|((${h16}:){0,4}${h16})?::${ls32}|((${h16}:){0,5}${h16})?::${h16}|((${h16}:){0,6}${h16})?::)`;\n\n  const ipvfuture = `v[a-fA-F0-9]+\\\\.(${sub_delims}|${sub_delims}|\":)+`;\n\n  const ip_literal = `\\\\[(${ipv6address}|${ipvfuture})\\\\]`;\n\n  const port = `[0-9]*`;\n\n  const scheme = `[a-zA-Z][a-zA-Z0-9+\\\\-.]*`;\n\n  const iprivate_raw = `\\u{E000}-\\u{F8FF}\\u{F0000}-\\u{FFFFD}\\u{100000}-\\u{10FFFD}`;\n  const iprivate = `[${iprivate_raw}]`;\n\n  const ucschar_raw = `\\u{A0}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFEF}\\u{10000}-\\u{1FFFD}\\u{20000}-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}\\u{50000}-\\u{5FFFD}\\u{60000}-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}\\u{90000}-\\u{9FFFD}\\u{A0000}-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}\\u{D0000}-\\u{DFFFD}\\u{E1000}-\\u{EFFFD}`;\n\n  const iunreserved_raw = `a-zA-Z0-9\\\\-._~${ucschar_raw}`;\n  const iunreserved = `[${iunreserved_raw}]`;\n\n  const ipchar = `(${iunreserved}|${pct_encoded}|${sub_delims}|[:@])*`;\n\n  const ifragment = `(${ipchar}|[\\\\/?])*`;\n\n  const iquery = `(${ipchar}|${iprivate}|[\\\\/?])*`;\n\n  const isegment_nz = `(${ipchar})+`;\n  const isegment = `(${ipchar})*`;\n\n  const ipath_empty = '';\n  const ipath_rootless = `${isegment_nz}(\\\\/${isegment})*`;\n  const ipath_absolute = `\\\\/(${isegment_nz}(\\\\/${isegment})*)?`;\n  const ipath_abempty = `(\\\\/${isegment})*`;\n\n  const ireg_name = `(${iunreserved}|${pct_encoded}|${sub_delims})*`;\n\n  const ihost = `(${ip_literal}|${ipv4address}|${ireg_name})`;\n  const iuserinfo = `(${iunreserved}|${pct_encoded}|${sub_delims}|:)*`;\n  const iauthority = `(${iuserinfo}@)?${ihost}(:${port})?`;\n\n  const ihier_part = `(\\\\/\\\\/${iauthority}${ipath_abempty}|${ipath_absolute}|${ipath_rootless}|${ipath_empty})`;\n\n  const iri = `^${scheme}:${ihier_part}(\\\\?${iquery})?(#${ifragment})?$`;\n\n  return new RegExp(iri, 'u');\n}\n\nconst STRICT_IRI_REGEX: RegExp = buildAbsoluteIriRfc3987Regex();\n// eslint-disable-next-line no-control-regex\nconst PRAGMATIC_IRI_REGEX = /^[A-Za-z][\\d+-.A-Za-z]*:[^\\u0000-\\u0020\"<>\\\\^`{|}]*$/u;\n\n/**\n * Possible ways of validating an IRI\n */\nexport enum IriValidationStrategy {\n  /**\n   * Validates the IRI according to RFC 3987.\n   */\n  Strict = 'strict',\n\n  /**\n   * Validates that the IRI has a valid scheme and does not contain any character forbidden by the Turtle specification.\n   */\n  Pragmatic = 'pragmatic',\n\n  /**\n   * Does not validate the IRI at all.\n   */\n  None = 'none'\n}\n\n/**\n * Validate a given IRI according to the given strategy.\n *\n * By default the IRI is fully validated according to RFC 3987.\n * But it is possible to do a lighter a faster validation using the \"pragmatic\" strategy.\n *\n * @param {string} iri a string that may be an IRI.\n * @param {IriValidationStrategy} strategy IRI validation strategy.\n * @return {Error | undefined} An error if the IRI is invalid, or undefined if it is valid.\n */\nexport function validateIri(\n  iri: string, strategy: IriValidationStrategy = IriValidationStrategy.Strict,\n): Error | undefined {\n  switch (strategy) {\n    case IriValidationStrategy.Strict:\n      return STRICT_IRI_REGEX.test(iri) ? undefined : new Error(`Invalid IRI according to RFC 3987: '${iri}'`);\n    case IriValidationStrategy.Pragmatic:\n      return PRAGMATIC_IRI_REGEX.test(iri) ? undefined : new Error(`Invalid IRI according to RDF Turtle: '${iri}'`);\n    case IriValidationStrategy.None:\n      return undefined;\n    default:\n      return new Error(`Not supported validation strategy \"${strategy}\"`);\n  }\n}\n"]}