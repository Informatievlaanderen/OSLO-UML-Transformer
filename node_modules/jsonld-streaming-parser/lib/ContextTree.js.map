{"version":3,"file":"ContextTree.js","sourceRoot":"","sources":["ContextTree.ts"],"names":[],"mappings":";;;AAEA;;;;;GAKG;AACH,MAAa,WAAW;IAAxB;QAEmB,aAAQ,GAAiC,EAAE,CAAC;IAkC/D,CAAC;IA/BQ,UAAU,CAAC,IAAc;QAC9B,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,MAAM,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;YAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,OAAO,EAAE;gBACX,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC5C,IAAI,UAAU,EAAE;oBACd,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;iBACjF;aACF;SACF;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACvF,CAAC;IAEM,UAAU,CAAC,IAAW,EAAE,OAAgD;QAC7E,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SACxB;aAAM;YACL,MAAM,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;YAC7B,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,WAAW,EAAE,CAAC;aACnD;YACD,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACnC;IACH,CAAC;IAEM,aAAa,CAAC,IAAc;QACjC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC9B,CAAC;CAEF;AApCD,kCAoCC","sourcesContent":["import {JsonLdContextNormalized} from \"jsonld-context-parser\";\n\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nexport class ContextTree {\n\n  private readonly subTrees: {[key: string]: ContextTree} = {};\n  private context: Promise<JsonLdContextNormalized> | null;\n\n  public getContext(keys: string[]): Promise<{ context: JsonLdContextNormalized, depth: number }> | null {\n    if (keys.length > 0) {\n      const [head, ...tail] = keys;\n      const subTree = this.subTrees[head];\n      if (subTree) {\n        const subContext = subTree.getContext(tail);\n        if (subContext) {\n          return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n        }\n      }\n    }\n    return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n  }\n\n  public setContext(keys: any[], context: Promise<JsonLdContextNormalized> | null) {\n    if (keys.length === 0) {\n      this.context = context;\n    } else {\n      const [head, ...tail] = keys;\n      let subTree = this.subTrees[head];\n      if (!subTree) {\n        subTree = this.subTrees[head] = new ContextTree();\n      }\n      subTree.setContext(tail, context);\n    }\n  }\n\n  public removeContext(path: string[]) {\n    this.setContext(path, null);\n  }\n\n}\n"]}