{"version":3,"file":"IContainerHandler.js","sourceRoot":"","sources":["IContainerHandler.ts"],"names":[],"mappings":"","sourcesContent":["import {ParsingContext} from \"../ParsingContext\";\nimport {Util} from \"../Util\";\n\n/**\n * Handler for @container types.\n */\nexport interface IContainerHandler {\n\n  /**\n   * If this container type can be combined with @graph containers.\n   */\n  canCombineWithGraph(): boolean;\n\n  /**\n   * Process the given value that has the given container type.\n   * @param containers The applicable container hash.\n   * @param parsingContext The parsing context.\n   * @param {Util} util A utility instance.\n   * @param {string[]} keys The array of stack keys.\n   * @param value The current value that is being parsed.\n   * @param {number} depth The current stack depth.\n   * @return {Promise<void>} A promise resolving when handling is done.\n   */\n  handle(containers: { [typeName: string]: boolean }, parsingContext: ParsingContext, util: Util,\n         keys: string[], value: any, depth: number): Promise<void>;\n\n}\n"]}