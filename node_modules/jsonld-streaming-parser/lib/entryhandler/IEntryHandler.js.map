{"version":3,"file":"IEntryHandler.js","sourceRoot":"","sources":["IEntryHandler.ts"],"names":[],"mappings":"","sourcesContent":["import {ParsingContext} from \"../ParsingContext\";\nimport {Util} from \"../Util\";\n\n/**\n * Handler for processing key-value pairs.\n */\nexport interface IEntryHandler<T> {\n\n  /**\n   * @return {boolean} If this can handle properties and generate predicates for them.\n   */\n  isPropertyHandler(): boolean;\n\n  /**\n   * @return {boolean} If this handler should flag {@link ParsingContext#processingStack} for the given depth.\n   *                   Handlers for things like @id, @context and @type return false, while prop handlers return true.\n   */\n  isStackProcessor(): boolean;\n\n  /**\n   * Check if the given key is valid.\n   *\n   * This is called when validating parent keys.\n   *\n   * @param {ParsingContext} parsingContext A parsing context.\n   * @param {Util} util A utility instance.\n   * @param {any[]} keys A stack of keys.\n   * @param {number} depth The current depth.\n   * @param {boolean} inProperty If the current depth is part of a valid property node.\n   * @return {Promise<boolean>} A promise resolving to a boolean representing if the key is valid.\n   */\n  validate(parsingContext: ParsingContext, util: Util, keys: any[], depth: number, inProperty: boolean)\n    : Promise<boolean>;\n\n  /**\n   * Check if this handler can handle the given key.\n   *\n   * @param {ParsingContext} parsingContext A parsing context.\n   * @param {Util} util A utility instance.\n   * @param key The current (unaliased) key.\n   * @param {any[]} keys A stack of keys.\n   * @param {number} depth The current depth.\n   * @return {Promise<T | null>} A promise resolving to a truthy value if it can handle.\n   *                             (this value will be passed into {@link IEntryHandler#handle})\n   */\n  test(parsingContext: ParsingContext, util: Util, key: any, keys: any[], depth: number): Promise<T | null>;\n\n  /**\n   * Handle the given entry.\n   *\n   * @param {ParsingContext} parsingContext A parsing context.\n   * @param {Util} util A utility instance.\n   * @param key The current (unaliased) key.\n   * @param {any[]} keys A stack of keys.\n   * @param value The value to handle.\n   * @param {number} depth The current depth.\n   * @param {T} testResult The test result from {@link IEntryHandler#test}.\n   * @return {Promise<any>} A promise resolving when the handling is done.\n   */\n  handle(parsingContext: ParsingContext, util: Util, key: any, keys: any[], value: any, depth: number, testResult: T)\n    : Promise<any>;\n\n}\n"]}