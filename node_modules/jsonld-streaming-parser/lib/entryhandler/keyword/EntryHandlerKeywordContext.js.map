{"version":3,"file":"EntryHandlerKeywordContext.js","sourceRoot":"","sources":["EntryHandlerKeywordContext.ts"],"names":[],"mappings":";;;AAAA,iEAAuF;AAGvF,+DAA0D;AAE1D;;GAEG;AACH,MAAa,0BAA2B,SAAQ,yCAAmB;IAEjE;QACE,KAAK,CAAC,UAAU,CAAC,CAAC;IACpB,CAAC;IAEM,gBAAgB;QACrB,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,cAA8B,EAAE,IAAU,EAAE,GAAQ,EAAE,IAAW,EAAE,KAAU,EAAE,KAAa;QAE9G,0EAA0E;QAC1E,IAAI,cAAc,CAAC,gBAAgB;eAC9B,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,CAAC;mBACpC,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC;mBACpC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC,EAAE;YACnD,cAAc,CAAC,SAAS,CAAC,IAAI,kCAAU,CAAC,4DAA4D;gBAClG,8BAA8B,EAAE,mCAAW,CAAC,2BAA2B,CAAC,CAAC,CAAC;SAC7E;QAED,2CAA2C;QAC3C,gFAAgF;QAChF,qGAAqG;QACrG,MAAM,aAAa,GAAqC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAExF,iCAAiC;QACjC,MAAM,OAAO,GAAG,cAAc,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,MAAM,aAAa,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;QAC1F,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAClE,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAClC,MAAM,cAAc,CAAC,eAAe,CAAC,MAAM,OAAO,CAAC,CAAC;IACtD,CAAC;CAEF;AAjCD,gEAiCC","sourcesContent":["import {ERROR_CODES, ErrorCoded, JsonLdContextNormalized} from \"jsonld-context-parser\";\nimport {ParsingContext} from \"../../ParsingContext\";\nimport {Util} from \"../../Util\";\nimport {EntryHandlerKeyword} from \"./EntryHandlerKeyword\";\n\n/**\n * Handles @context entries.\n */\nexport class EntryHandlerKeywordContext extends EntryHandlerKeyword {\n\n  constructor() {\n    super('@context');\n  }\n\n  public isStackProcessor(): boolean {\n    return false;\n  }\n\n  public async handle(parsingContext: ParsingContext, util: Util, key: any, keys: any[], value: any, depth: number)\n    : Promise<any> {\n    // Error if an out-of-order context was found when support is not enabled.\n    if (parsingContext.streamingProfile\n      && (parsingContext.processingStack[depth]\n        || parsingContext.processingType[depth]\n        || parsingContext.idStack[depth] !== undefined)) {\n      parsingContext.emitError(new ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n        '(disable `streamingProfile`)', ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n    }\n\n    // Find the parent context to inherit from.\n    // We actually request a context for the current depth (with fallback to parent)\n    // because we want to take into account any property-scoped contexts that are defined for this depth.\n    const parentContext: Promise<JsonLdContextNormalized> = parsingContext.getContext(keys);\n\n    // Set the context for this scope\n    const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n    parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n    parsingContext.emitContext(value);\n    await parsingContext.validateContext(await context);\n  }\n\n}\n"]}