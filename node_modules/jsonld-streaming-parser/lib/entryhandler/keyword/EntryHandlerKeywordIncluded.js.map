{"version":3,"file":"EntryHandlerKeywordIncluded.js","sourceRoot":"","sources":["EntryHandlerKeywordIncluded.ts"],"names":[],"mappings":";;;AAAA,iEAAuF;AAIvF,+DAA0D;AAE1D;;GAEG;AACH,MAAa,2BAA4B,SAAQ,yCAAmB;IAElE;QACE,KAAK,CAAC,WAAW,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,cAA8B,EAAE,IAAU,EAAE,GAAQ,EAAE,IAAW,EAAE,KAAU,EAAE,KAAa;QAE9G,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,cAAc,CAAC,SAAS,CAAC,IAAI,kCAAU,CAAC,4BAA4B,KAAK,GAAG,EAC1E,mCAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC;SACxC;QACD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5G,IAAI,QAAQ,IAAI,aAAa,EAAE;YAC7B,cAAc,CAAC,SAAS,CAAC,IAAI,kCAAU,CAAC,2CAA2C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EACzG,mCAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC;SACxC;QACD,IAAI,OAAO,IAAI,aAAa,EAAE;YAC5B,cAAc,CAAC,SAAS,CAAC,IAAI,kCAAU,CAAC,0CAA0C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EACxG,mCAAW,CAAC,sBAAsB,CAAC,CAAC,CAAC;SACxC;QAED,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IAC7C,CAAC;CAEF;AAzBD,kEAyBC","sourcesContent":["import {ERROR_CODES, ErrorCoded, JsonLdContextNormalized} from \"jsonld-context-parser\";\nimport {ParsingContext} from \"../../ParsingContext\";\nimport {Util} from \"../../Util\";\nimport {EntryHandlerPredicate} from \"../EntryHandlerPredicate\";\nimport {EntryHandlerKeyword} from \"./EntryHandlerKeyword\";\n\n/**\n * Handles @included entries.\n */\nexport class EntryHandlerKeywordIncluded extends EntryHandlerKeyword {\n\n  constructor() {\n    super('@included');\n  }\n\n  public async handle(parsingContext: ParsingContext, util: Util, key: any, keys: any[], value: any, depth: number)\n    : Promise<any> {\n    if (typeof value !== 'object') {\n      parsingContext.emitError(new ErrorCoded(`Found illegal @included '${value}'`,\n        ERROR_CODES.INVALID_INCLUDED_VALUE));\n    }\n    const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n    if ('@value' in valueUnliased) {\n      parsingContext.emitError(new ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`,\n        ERROR_CODES.INVALID_INCLUDED_VALUE));\n    }\n    if ('@list' in valueUnliased) {\n      parsingContext.emitError(new ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`,\n        ERROR_CODES.INVALID_INCLUDED_VALUE));\n    }\n\n    parsingContext.emittedStack[depth] = false;\n  }\n\n}\n"]}