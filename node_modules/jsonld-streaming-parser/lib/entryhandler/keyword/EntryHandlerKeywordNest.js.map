{"version":3,"file":"EntryHandlerKeywordNest.js","sourceRoot":"","sources":["EntryHandlerKeywordNest.ts"],"names":[],"mappings":";;;AAAA,iEAAuF;AAIvF,+DAA0D;AAE1D;;GAEG;AACH,MAAa,uBAAwB,SAAQ,yCAAmB;IAE9D;QACE,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,cAA8B,EAAE,IAAU,EAAE,GAAQ,EAAE,IAAW,EAAE,KAAU,EAAE,KAAa;QAE9G,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,cAAc,CAAC,SAAS,CAAC,IAAI,kCAAU,CAAC,kCAAkC,GAAG,OAAO,KAAK,GAAG,EAC1F,mCAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC;SACpC;QACD,IAAI,QAAQ,IAAI,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;YACrG,cAAc,CAAC,SAAS,CAAC,IAAI,kCAAU,CAAC,qCAAqC,GAAG,GAAG,EACjF,mCAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC;SACpC;QAED,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;IAC7C,CAAC;CAEF;AApBD,0DAoBC","sourcesContent":["import {ERROR_CODES, ErrorCoded, JsonLdContextNormalized} from \"jsonld-context-parser\";\nimport {ParsingContext} from \"../../ParsingContext\";\nimport {Util} from \"../../Util\";\nimport {EntryHandlerPredicate} from \"../EntryHandlerPredicate\";\nimport {EntryHandlerKeyword} from \"./EntryHandlerKeyword\";\n\n/**\n * Handles @nest entries.\n */\nexport class EntryHandlerKeywordNest extends EntryHandlerKeyword {\n\n  constructor() {\n    super('@nest');\n  }\n\n  public async handle(parsingContext: ParsingContext, util: Util, key: any, keys: any[], value: any, depth: number)\n    : Promise<any> {\n    if (typeof value !== 'object') {\n      parsingContext.emitError(new ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`,\n        ERROR_CODES.INVALID_NEST_VALUE));\n    }\n    if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n      parsingContext.emitError(new ErrorCoded(`Found an invalid @value node for '${key}'`,\n        ERROR_CODES.INVALID_NEST_VALUE));\n    }\n\n    parsingContext.emittedStack[depth] = false;\n  }\n\n}\n"]}