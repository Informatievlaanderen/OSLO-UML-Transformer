{"version":3,"file":"EntryHandlerKeyword.js","sourceRoot":"","sources":["EntryHandlerKeyword.ts"],"names":[],"mappings":";;;AAIA;;GAEG;AACH,MAAsB,mBAAmB;IAIvC,YAAsB,OAAe;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,iBAAiB;QACtB,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,cAA8B,EAAE,IAAU,EAAE,IAAW,EAAE,KAAa,EAAE,UAAmB;QAE/G,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,cAA8B,EAAE,IAAU,EAAE,GAAQ,EAAE,IAAW,EAAE,KAAa;QAEhG,OAAO,GAAG,KAAK,IAAI,CAAC,OAAO,CAAC;IAC9B,CAAC;CAKF;AA7BD,kDA6BC","sourcesContent":["import {ParsingContext} from \"../../ParsingContext\";\nimport {Util} from \"../../Util\";\nimport {IEntryHandler} from \"../IEntryHandler\";\n\n/**\n * An abstract keyword entry handler.\n */\nexport abstract class EntryHandlerKeyword implements IEntryHandler<boolean> {\n\n  private readonly keyword: string;\n\n  protected constructor(keyword: string) {\n    this.keyword = keyword;\n  }\n\n  public isPropertyHandler(): boolean {\n    return false;\n  }\n\n  public isStackProcessor(): boolean {\n    return true;\n  }\n\n  public async validate(parsingContext: ParsingContext, util: Util, keys: any[], depth: number, inProperty: boolean)\n    : Promise<boolean> {\n    return false;\n  }\n\n  public async test(parsingContext: ParsingContext, util: Util, key: any, keys: any[], depth: number)\n    : Promise<boolean> {\n    return key === this.keyword;\n  }\n\n  public abstract handle(parsingContext: ParsingContext, util: Util, key: any, keys: any[], value: any, depth: number,\n                         testResult: boolean): Promise<any>;\n\n}\n"]}