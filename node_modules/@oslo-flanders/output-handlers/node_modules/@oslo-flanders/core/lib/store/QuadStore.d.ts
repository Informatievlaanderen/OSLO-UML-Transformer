import type * as RDF from '@rdfjs/types';
export declare class QuadStore {
    private readonly store;
    constructor();
    addQuads(quads: RDF.Quad[]): void;
    addQuad(quad: RDF.Quad): void;
    addQuadsFromFile(file: string): Promise<void>;
    findQuads(subject: RDF.Term | null, predicate: RDF.Term | null, object: RDF.Term | null): RDF.Quad[];
    findQuad(subject: RDF.Term | null, predicate: RDF.Term | null, object: RDF.Term | null): RDF.Quad | undefined;
    findSubjects(predicate: RDF.Term, object: RDF.Term): RDF.Term[];
    findSubject(predicate: RDF.Term, object: RDF.Term): RDF.Term | undefined;
    findObjects(subject: RDF.Term, predicate: RDF.Term): RDF.Term[];
    findObject(subject: RDF.Term, predicate: RDF.Term): RDF.Term | undefined;
    /**
     * Finds the subject where predicate is 'rdf:type' and object 'example:Package'
     * @returns a RDF.NamedNode or undefined
     */
    getPackageId(): RDF.NamedNode | undefined;
    /**
     * Finds all subjects where predicate is 'rdf:type' and object 'owl:Class'
     * @returns an array of RDF.NamedNodes
     */
    getClassIds(): RDF.NamedNode[];
    /**
   * Finds all subjects where predicate is 'rdf:type' and object 'owl:DatatypeProperty'
   * @returns an array of RDF.NamedNodes
   */
    getDatatypePropertyIds(): RDF.NamedNode[];
    /**
   * Finds all subjects where predicate is 'rdf:type' and object 'owl:ObjectProperty'
   * @returns an array of RDF.NamedNodes
   */
    getObjectPropertyIds(): RDF.NamedNode[];
    /**
     * For a given subject, the quad store is queried to find the assigned URI
     * @param subject The subject for which the assigned URI is to be retrieved
     * @param store The quad store
     * @returns An RDF.NamedNode or undefined if not found
     */
    getAssignedUri(subject: RDF.Term): RDF.NamedNode | undefined;
    /**
     * Find all rdfs:labels for a given subject
     * @param subject The RDF.Term to find the rdfs:labels for
     * @param store A N3 quad store
     * @returns An array of RDF.Literals
     */
    getLabels(subject: RDF.Term): RDF.Literal[];
    /**
     * Finds the rdfs:label whose language tag matches the given language
     * @param subject The RDF.Term to find the rdfs:label for
     * @param store A N3 quad store
     * @param language A language tag
     * @returns An RDF.Literal or undefined if not found
     */
    getLabel(subject: RDF.Term, language?: string): RDF.Literal | undefined;
    /**
     * Find all rdfs:comments for a given subject
     * @param subject The RDF.Term to find the rdfs:comments for
     * @param store A N3 quad store
     * @returns An array of RDF.Literals
     */
    getDefinitions(subject: RDF.Term): RDF.Literal[];
    /**
     * Finds the rdfs:comment whose language tag matches the given language
     * @param subject The RDF.Term to find the rdfs:comment for
     * @param store A N3 quad store
     * @param language A language tag
     * @returns An RDF.Literal or undefined if not found
     */
    getDefinition(subject: RDF.Term, language?: string): RDF.Literal | undefined;
    /**
     * Finds the rdfs:range of a given RDF.Term
     * @param subject The RDF.Term to find the range of
     * @param store A N3 quad store
     * @returns An RDF.Term or undefined if not found
     */
    getRange(subject: RDF.Term): RDF.NamedNode | undefined;
    /**
     * Finds the rdfs:domain of a given RDF.Term
     * @param subject The RDF.Term to find the domain of
     * @param store A N3 quad store
     * @returns An RDF.Term or undefined if not found
     */
    getDomain(subject: RDF.Term): RDF.NamedNode | undefined;
    /**
     * Finds all the vann:usageNotes of a given RDF.Term
     * @param subject The RDF.Term to find the usage notes for
     * @param store A N3 quad store
     * @returns An array of RDF.Literals
     */
    getUsageNotes(subject: RDF.Term): RDF.Literal[];
    /**
     * Finds the vann:usageNote of which the language tag matches the given language
     * @param subject The RDF.Term to find the usage note for
     * @param store A N3 quad store
     * @param language A language tag
     * @returns An RDF.Literal or undefined if not found
     */
    getUsageNote(subject: RDF.Term, language?: string): RDF.Literal | undefined;
    /**
     * Finds the example:scope of a given subject
     * @param subject The RDF.Term to find the scope for
     * @returns An RDF.NamedNode or undefined if not found
     */
    getScope(subject: RDF.Term): RDF.NamedNode | undefined;
    /**
     * Finds the shacl:minCardinality for a given subject
     * @param subject The RDF.Term to find the shacl:minCardinaly for
     * @returns An RDF.Literal or undefined if not found
     */
    getMinCardinality(subject: RDF.Term): RDF.Literal | undefined;
    /**
   * Finds the shacl:maxCardinality for a given subject
   * @param subject The RDF.Term to find the shacl:maxCardinaly for
   * @returns An RDF.Literal or undefined if not found
   */
    getMaxCardinality(subject: RDF.Term): RDF.Literal | undefined;
    /**
     * Finds all the rdfs:subClassOf of a given RDF.Term
     * @param subject the RDF.Term to find the parents of
     * @param store A N3 quad store
     * @returns An array of RDF.Terms
     */
    getParentsOfClass(subject: RDF.Term): RDF.NamedNode[];
    /**
     * Finds the rdfs:subPropertyOf of a given RDF.Term
     * @param subject The RDF.Term to find the parent of
     * @param store A N3 quad store
     * @returns An RDF.Term or undefined if not found
     */
    getParentOfProperty(subject: RDF.Term): RDF.NamedNode | undefined;
    /**
     * Find the subject of the statement that matches the given subject, predicate and object
     * @param statementSubject The subject to match the statement subject
     * @param statementPredicate The predicate to match the statement predicate
     * @param statementObject The object to match the statement object
     * @param store An N3 quad store
     * @returns an RDF.Term or undefined if none found
     */
    getTargetStatementId(statementSubject: RDF.Term, statementPredicate: RDF.Term, statementObject: RDF.Term): RDF.Term | undefined;
    /**
     * Finds the assigned URI in rdf:Statements
     * @param subject The statement subject
     * @param predicate The statement predicate
     * @param object The statement object for which the assigned URI must be found
     * @param store A N3 quad store
     * @returns An RDF.Term or undefined if not found
     */
    getAssignedUriViaStatements(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term): RDF.NamedNode | undefined;
    /**
     * Finds the rdfs:label for an RDF.Term in rdf:Statements
     * @param subject The statement subject
     * @param predicate The statement predicate
     * @param object The statement object for which the label must be found
     * @param store A N3 quad store
     * @param language A language tag
     * @returns An RDF.Literal or undefined if not found
     */
    getLabelViaStatements(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, language: string): RDF.Literal | undefined;
    /**
     * Finds the rdfs:comment for an RDF.Term in rdf:Statements
     * @param subject The statement subject
     * @param predicate The statement predicate
     * @param object The statement object for which the definition must be found
     * @param store A N3 quad store
     * @param language A language tag
     * @returns An RDF.Literal or undefined if not found
     */
    getDefinitionViaStatements(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, language: string): RDF.Literal | undefined;
    /**
     * Finds the vann:usageNote for an RDF.Term in rdf:Statements
     * @param subject The statement subject
     * @param predicate The statement predicate
     * @param object The statement object for which the usage note must be found
     * @param store A N3 quad store
     * @param language A language tag
     * @returns An RDF.Literal or undefined if not found
     */
    getUsageNoteViaStatements(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, language: string): RDF.Literal | undefined;
}
