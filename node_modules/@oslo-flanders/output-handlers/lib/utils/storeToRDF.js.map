{"version":3,"file":"storeToRDF.js","sourceRoot":"","sources":["storeToRDF.ts"],"names":[],"mappings":"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","sourcesContent":["import type { WriteStream } from 'fs';\r\nimport { createWriteStream } from 'fs';\r\nimport { ns } from '@oslo-flanders/core';\r\nimport type * as RDF from '@rdfjs/types';\r\nimport * as N3 from 'n3';\r\n\r\n/**\r\n * Reads the triples from an N3.Store to a stream\r\n * @param store — an N3 RDF store\r\n * @param format — The format in which the output must be written (an RDF serialisation)\r\n */\r\nexport function storeToRDF(store: N3.Store, format: string): void {\r\n  return format === 'application/ld+json' ? serialiseToJsonLd(store) : serialiseToTriG(store);\r\n}\r\n\r\nfunction serialiseToTriG(store: N3.Store): void {\r\n  const writer = new N3.Writer(createWriteStream('report.trig'), { format: 'application/trig' });\r\n\r\n  writer.addQuads(store.getQuads(null, null, null, null));\r\n  writer.end();\r\n}\r\n\r\nfunction serialiseToJsonLd(store: N3.Store): void {\r\n  const document: any = {};\r\n  document.packages = getPackagesAsJsonLd(store);\r\n  document.classes = getClassesAsJsonLd(store);\r\n\r\n  const writeStream: any = process.stdout;\r\n\r\n  (<WriteStream>writeStream).write(JSON.stringify(document));\r\n\r\n  // Const stream = createWriteStream(process.stdout);\r\n  // stream.write(JSON.stringify(document, null, 2));\r\n  //\r\n  // writeFileSync('report-test-output.jsonld', JSON.stringify(document, null, 2));\r\n}\r\n\r\nfunction getPackagesAsJsonLd(store: N3.Store): any {\r\n  const packageSubjectGraphQuads = store.getQuads(null, ns.rdf('type'), ns.example('Package'), null);\r\n  return packageSubjectGraphQuads.map(quad => {\r\n    const packageQuads = store.getQuads(null, null, null, quad.graph);\r\n\r\n    const baseUriValues = packageQuads.filter(x => x.predicate.equals(ns.example('baseUri')));\r\n    if (baseUriValues.length === 0) {\r\n      throw new Error(`Unnable to find base URI for package with .well-known id ${quad.graph.value}`);\r\n    }\r\n\r\n    return {\r\n      '@id': quad.graph.value,\r\n      '@graph': {\r\n        '@id': quad.subject.value,\r\n        '@type': 'Package',\r\n        baseUri: baseUriValues[0].object.value,\r\n      },\r\n    };\r\n  });\r\n}\r\n\r\nfunction getClassesAsJsonLd(store: N3.Store): any {\r\n  const classSubjectGraphQuads = store.getQuads(null, ns.rdf('type'), ns.owl('Class'), null);\r\n  return classSubjectGraphQuads.reduce<any[]>((jsonLdClasses, quad) => {\r\n    // Skos:Concept classes are not being published separately, but only\r\n    // as part of an attribute's range\r\n    if (quad.subject.equals(ns.skos('Concept'))) {\r\n      return jsonLdClasses;\r\n    }\r\n\r\n    const classQuads = store.getQuads(null, null, null, quad.graph);\r\n\r\n    const definitionQuads = classQuads.filter(x => x.predicate.equals(ns.rdfs('comment')));\r\n    const labelQuads = classQuads.filter(x => x.predicate.equals(ns.rdfs('label')));\r\n    const scopeQuad = classQuads.find(x => x.predicate.equals(ns.example('scope')));\r\n    const parentQuads = classQuads.filter(x => x.predicate.equals(ns.rdfs('subClassOf')));\r\n\r\n    const parentLabelQuads: RDF.Quad[] = [];\r\n    if (parentQuads.length > 0) {\r\n      parentQuads.forEach(parentQuad => {\r\n        parentLabelQuads.push(...store.getQuads(parentQuad.object, ns.rdfs('label'), null, null));\r\n      });\r\n    }\r\n\r\n    jsonLdClasses.push(\r\n      {\r\n        '@id': quad.graph.value,\r\n        '@graph': {\r\n          '@id': quad.subject.value,\r\n          '@type': 'Class',\r\n          definition: definitionQuads\r\n            .map(x => ({ '@language': (<RDF.Literal>x.object).language, '@value': x.object.value })),\r\n          label: labelQuads.map(x => ({ '@language': (<RDF.Literal>x.object).language, '@value': x.object.value })),\r\n          scope: scopeQuad?.object.value,\r\n          ...parentQuads.length > 0 && {\r\n            parent: parentLabelQuads\r\n              .map(x => ({\r\n                '@id': x.subject.value,\r\n                label: { '@language': (<RDF.Literal>x.object).language, '@value': x.object.value },\r\n              })),\r\n          },\r\n        },\r\n      },\r\n    );\r\n\r\n    return jsonLdClasses;\r\n  }, []);\r\n}\r\n\r\n"]}