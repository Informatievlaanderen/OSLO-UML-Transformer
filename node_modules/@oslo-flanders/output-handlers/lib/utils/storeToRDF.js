"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.storeToRDF = void 0;
const fs_1 = require("fs");
const core_1 = require("@oslo-flanders/core");
const N3 = __importStar(require("n3"));
/**
 * Reads the triples from an N3.Store to a stream
 * @param store — an N3 RDF store
 * @param format — The format in which the output must be written (an RDF serialisation)
 */
function storeToRDF(store, format) {
    return format === 'application/ld+json' ? serialiseToJsonLd(store) : serialiseToTriG(store);
}
exports.storeToRDF = storeToRDF;
function serialiseToTriG(store) {
    const writer = new N3.Writer((0, fs_1.createWriteStream)('report.trig'), { format: 'application/trig' });
    writer.addQuads(store.getQuads(null, null, null, null));
    writer.end();
}
function serialiseToJsonLd(store) {
    const document = {};
    document.packages = getPackagesAsJsonLd(store);
    document.classes = getClassesAsJsonLd(store);
    const writeStream = process.stdout;
    writeStream.write(JSON.stringify(document));
    // Const stream = createWriteStream(process.stdout);
    // stream.write(JSON.stringify(document, null, 2));
    //
    // writeFileSync('report-test-output.jsonld', JSON.stringify(document, null, 2));
}
function getPackagesAsJsonLd(store) {
    const packageSubjectGraphQuads = store.getQuads(null, core_1.ns.rdf('type'), core_1.ns.example('Package'), null);
    return packageSubjectGraphQuads.map(quad => {
        const packageQuads = store.getQuads(null, null, null, quad.graph);
        const baseUriValues = packageQuads.filter(x => x.predicate.equals(core_1.ns.example('baseUri')));
        if (baseUriValues.length === 0) {
            throw new Error(`Unnable to find base URI for package with .well-known id ${quad.graph.value}`);
        }
        return {
            '@id': quad.graph.value,
            '@graph': {
                '@id': quad.subject.value,
                '@type': 'Package',
                baseUri: baseUriValues[0].object.value,
            },
        };
    });
}
function getClassesAsJsonLd(store) {
    const classSubjectGraphQuads = store.getQuads(null, core_1.ns.rdf('type'), core_1.ns.owl('Class'), null);
    return classSubjectGraphQuads.reduce((jsonLdClasses, quad) => {
        // Skos:Concept classes are not being published separately, but only
        // as part of an attribute's range
        if (quad.subject.equals(core_1.ns.skos('Concept'))) {
            return jsonLdClasses;
        }
        const classQuads = store.getQuads(null, null, null, quad.graph);
        const definitionQuads = classQuads.filter(x => x.predicate.equals(core_1.ns.rdfs('comment')));
        const labelQuads = classQuads.filter(x => x.predicate.equals(core_1.ns.rdfs('label')));
        const scopeQuad = classQuads.find(x => x.predicate.equals(core_1.ns.example('scope')));
        const parentQuads = classQuads.filter(x => x.predicate.equals(core_1.ns.rdfs('subClassOf')));
        const parentLabelQuads = [];
        if (parentQuads.length > 0) {
            parentQuads.forEach(parentQuad => {
                parentLabelQuads.push(...store.getQuads(parentQuad.object, core_1.ns.rdfs('label'), null, null));
            });
        }
        jsonLdClasses.push({
            '@id': quad.graph.value,
            '@graph': {
                '@id': quad.subject.value,
                '@type': 'Class',
                definition: definitionQuads
                    .map(x => ({ '@language': x.object.language, '@value': x.object.value })),
                label: labelQuads.map(x => ({ '@language': x.object.language, '@value': x.object.value })),
                scope: scopeQuad === null || scopeQuad === void 0 ? void 0 : scopeQuad.object.value,
                ...parentQuads.length > 0 && {
                    parent: parentLabelQuads
                        .map(x => ({
                        '@id': x.subject.value,
                        label: { '@language': x.object.language, '@value': x.object.value },
                    })),
                },
            },
        });
        return jsonLdClasses;
    }, []);
}
//# sourceMappingURL=storeToRDF.js.map