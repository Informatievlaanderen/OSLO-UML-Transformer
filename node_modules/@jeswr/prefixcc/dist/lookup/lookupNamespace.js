"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookupUri = void 0;
const fetchContext_1 = require("./fetchContext");
/**
 * Use prefix.cc to look up the namespace associated with a given prefix.
 * Errors if one cannot be found.
 *
 * @param prefix The prefix of which to obtain the namespace
 * @param options Optional fetch function to use
 */
function lookupUri(prefix, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const uri = (yield (0, fetchContext_1.fetchContext)(`https://prefix.cc/${prefix}.file.jsonld`, options))[prefix];
        if (typeof uri !== 'string') {
            throw new Error(`Expected uri to be a string, received: ${uri} of type ${typeof uri}`);
        }
        return uri;
    });
}
exports.lookupUri = lookupUri;
