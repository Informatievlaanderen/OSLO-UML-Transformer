"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookupPrefix = void 0;
const fetchContext_1 = require("./fetchContext");
/**
 * Use prefix.cc to look up the prefix for a URI namespace, rejects if there is an error in
 * looking up the prefix, or if no prefixes are returned
 *
 * @param uri The URI to obtain a prefix for
 * @param options Optional fetch function to use
 */
function lookupPrefix(uri, options) {
    return __awaiter(this, void 0, void 0, function* () {
        // Create the correct url to lookup including search parameters
        const url = new URL('https://prefix.cc/reverse');
        url.searchParams.append('uri', uri);
        url.searchParams.append('format', 'jsonld');
        const prefixes = Object.keys(yield (0, fetchContext_1.fetchContext)(url, options));
        if (prefixes.length === 0) {
            throw new Error('No prefixes returned');
        }
        return prefixes[0];
    });
}
exports.lookupPrefix = lookupPrefix;
