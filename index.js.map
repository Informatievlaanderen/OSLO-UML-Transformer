{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,gDAAwB;AAExB,qDAK+B;AAE/B,iDAAmE;AACnE,yCAQuB;AAEvB,MAAM,GAAG,GAAG,KAAK,IAAmB,EAAE;IACpC,OAAO,CAAC,GAAG,CAAC,gCAAgC,uBAAW,iBAAiB,CAAC,CAAC;IAC1E,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC9C,MAAM,OAAO,GAAW,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAQ,CAAC,CAAC;IACvD,MAAM,GAAG,GAAG,cAAI,CAAC,IAAI,CACnB,SAAS,EACT,GAAG,qBAAS,IAAI,uBAAW,WAAW,uBAAW,EAAE,CACpD,CAAC;IAEF,MAAM,IAAA,2BAAmB,EAAC,uBAAW,EAAE,OAAO,CAAC,CAAC;IAChD,MAAM,IAAA,kBAAU,EAAC,oBAAQ,EAAE,UAAU,CAAC,CAAC;IACvC,MAAM,KAAK,GAAG,MAAM,IAAA,iBAAS,EAAC,GAAG,CAAC,CAAC;IACnC,MAAM,OAAO,GAAG,MAAM,IAAA,iBAAS,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC5C,MAAM,YAAY,GAAmC,OAAO,CAAC,IAAI,EAAE,CAAC;IACpE,MAAM,IAAI,GAAG,YAAY;QACvB,sEAAsE;SACrE,MAAM,CACL,CAAC,WAAyB,EAAE,EAAE,CAC5B,WAAW,CAAC,UAAU,IAAI,WAAW,CAAC,QAAQ,CACjD;SACA,GAAG,CACF,CAAC,WAAyB,EAAE,EAAE,CAC5B,GAAG,WAAW,CAAC,UAAU,eAAe,WAAW,CAAC,QAAQ,EAAE,CACjE,CAAC;IACJ,wBAAwB;IACxB,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACtC,MAAM,OAAO,GAAyB,MAAM,IAAA,sBAAc,EAAC,UAAU,CAAC,CAAC;IACvE,4EAA4E;IAC5E,MAAM,UAAU,GAAiB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACtD,IAAA,yBAAiB,EAAC,MAAM,CAAC,CAC1B,CAAC;IAEF,iDAAiD;IACjD,MAAM,QAAQ,GAAa,UAAU,CAAC,GAAG,CAAC,CAAC,SAAqB,EAAE,EAAE,CAClE,IAAA,8BAAkB,EAAC,SAAS,CAAC,CAC9B,CAAC;IAEF,MAAM,QAAQ,GAA6B,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAClE,IAAA,sBAAU,EAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,KAAc,EAAE,EAAE;QAC3C,IAAI,CAAC,KAAK;YAAE,OAAO;QACnB,MAAM,YAAY,GAAG,YAAY,OAAO,OAAc,KAAK,IAAI,CAAC;QAEhE,YAAE,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,EAAE,CAAC,GAAG,EAAE,EAAE;YAC/C,IAAI,GAAG,EAAE,CAAC;gBACR,OAAO,CAAC,KAAK,CAAC,gCAAgC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CACH,CAAC;IACF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEF,GAAG,EAAE;KACF,IAAI,CAAC,GAAG,EAAE;IACT,OAAO,CAAC,GAAG,CACT,6CAA6C,uBAAW,eAAe,CACxE,CAAC;AACJ,CAAC,CAAC;KACD,KAAK,CAAC,CAAC,KAAc,EAAE,EAAE;IACxB,MAAM,YAAY,GAAG,wBAAwB,KAAK,IAAI,CAAC;IACvD,YAAE,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,EAAE,CAAC,GAAG,EAAE,EAAE;QAC/C,IAAI,GAAG,EAAE,CAAC;YACR,OAAO,CAAC,KAAK,CAAC,gCAAgC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;KACD,OAAO,CAAC,KAAK,IAAI,EAAE;IAClB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC9B,MAAM,OAAO,GAAW,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAQ,CAAC,CAAC;IACvD,MAAM,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,qBAAS,IAAI,uBAAW,EAAE,CAAC,CAAC;IAChE,MAAM,IAAA,eAAO,EAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAE5B,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport {\n  ENVIRONMENT,\n  GITHUB_REPO,\n  REPO_NAME,\n  ZIP_NAME,\n} from './constants/constants';\nimport type { IConfig, IEapConfig, IPublication } from './types/config';\nimport { generateCliCommand, runCommand } from './utils/cli.utils';\nimport {\n  cleanup,\n  createZipFromGithub,\n  extractZip,\n  generateEapConfig,\n  getConfigFiles,\n  listFiles,\n  readFiles,\n} from './utils/utils';\n\nconst run = async (): Promise<void> => {\n  console.log(`Validating EAP files for the ${ENVIRONMENT} environment...`);\n  const targetPath = path.join(__dirname, './');\n  const zipPath: string = path.join(__dirname, ZIP_NAME);\n  const dir = path.join(\n    __dirname,\n    `${REPO_NAME}-${ENVIRONMENT}/config/${ENVIRONMENT}`,\n  );\n\n  await createZipFromGithub(GITHUB_REPO, zipPath);\n  await extractZip(ZIP_NAME, targetPath);\n  const files = await listFiles(dir);\n  const content = await readFiles(dir, files);\n  const publications: IPublication[] = <IPublication[]>content.flat();\n  const urls = publications\n    // If the config has a repository and a filename, we can build the URL\n    .filter(\n      (publication: IPublication) =>\n        publication.repository && publication.filename,\n    )\n    .map(\n      (publication: IPublication) =>\n        `${publication.repository}/raw/master/${publication.filename}`,\n    );\n  // Only keep unique URLs\n  const uniqueUrls = [...new Set(urls)];\n  const configs: IConfig[] = <IConfig[]>await getConfigFiles(uniqueUrls);\n  // Create config files that contain just the required parameters for the CLI\n  const eapConfigs: IEapConfig[] = configs.map((config) =>\n    generateEapConfig(config),\n  );\n\n  // Create the CLI command using the new eapConfig\n  const commands: string[] = eapConfigs.map((eapConfig: IEapConfig) =>\n    generateCliCommand(eapConfig),\n  );\n\n  const promises: Promise<string | void>[] = commands.map((command) =>\n    runCommand(command).catch((error: unknown) => {\n      if (!error) return;\n      const errorMessage = `Command: ${command} \\n ${<Error>error}\\n`;\n\n      fs.appendFile('error.log', errorMessage, (err) => {\n        if (err) {\n          console.error(`Failed to write to log file: ${err.message}`);\n        }\n      });\n    }),\n  );\n  await Promise.all(promises);\n};\n\nrun()\n  .then(() => {\n    console.log(\n      `All EAP files have been validated for the ${ENVIRONMENT} environment.`,\n    );\n  })\n  .catch((error: unknown) => {\n    const errorMessage = `Error during script: ${error}\\n`;\n    fs.appendFile('error.log', errorMessage, (err) => {\n      if (err) {\n        console.error(`Failed to write to log file: ${err.message}`);\n      }\n    });\n  })\n  .finally(async () => {\n    console.log('Cleaning up...');\n    const zipPath: string = path.join(__dirname, ZIP_NAME);\n    const dir = path.join(__dirname, `${REPO_NAME}-${ENVIRONMENT}`);\n    await cleanup(zipPath, dir);\n\n    console.log('Script finished.');\n  });\n"]}